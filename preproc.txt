# 1 "test/test.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "test/test.c"
# 1 "test/../types.h" 1





# 1 "test/../macro.h" 1
# 28 "test/../macro.h"
unsigned __cmodules__0b(const char* bit, unsigned len) {
    unsigned result = 0;
    for (unsigned i = len-1; (i+1) > i; i--) {
        if (bit[i] == '0') {
            result <<= 1;
        }
        else if (bit[i] == '1') {
            result <<= 1;
            result += 1;
        }
    }

    return result;
}

unsigned __cmodules_lsbs(unsigned n) {
    if (n == 0)
        return 0;

    unsigned result = 1;
    for (unsigned i = 1; i < n && i < 8*sizeof(void*); i++) {
        result <<= 1;
        result += 1;
    }

    return result;
}
# 7 "test/../types.h" 2
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 1 3
# 9 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 12 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_mac.h" 1 3
# 88 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_mac.h" 3
             
# 97 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_mac.h" 3
             
# 13 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_secapi.h" 1 3
# 14 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 275 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/vadefs.h" 1 3
# 9 "C:/Strawberry/c/x86_64-w64-mingw32/include/vadefs.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 565 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/sdks/_mingw_directx.h" 1 3
# 566 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 567 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 24 "C:/Strawberry/c/x86_64-w64-mingw32/include/vadefs.h" 3
  
# 24 "C:/Strawberry/c/x86_64-w64-mingw32/include/vadefs.h" 3
 typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 103 "C:/Strawberry/c/x86_64-w64-mingw32/include/vadefs.h" 3
#pragma pack(pop)
# 276 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 539 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw.h" 3
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);
# 11 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 35 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
__extension__ typedef unsigned long long size_t;
# 45 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
__extension__ typedef long long ssize_t;






typedef size_t rsize_t;
# 62 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
__extension__ typedef long long intptr_t;
# 75 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 88 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
__extension__ typedef long long ptrdiff_t;
# 98 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
typedef unsigned short wchar_t;







typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;
# 138 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
typedef __time64_t time_t;
# 422 "C:/Strawberry/c/x86_64-w64-mingw32/include/crtdefs.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/limits.h" 1 3 4
# 34 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/limits.h" 3 4
# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/syslimits.h" 1 3 4






# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/limits.h" 1 3 4
# 194 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/limits.h" 3 4
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/limits.h" 1 3 4
# 195 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/limits.h" 2 3 4
# 8 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/syslimits.h" 2 3 4
# 35 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include-fixed/limits.h" 2 3 4
# 11 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 25 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
#pragma pack(push,_CRT_PACKING)
# 49 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 59 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;

       


  typedef struct {
    long double x;
  } _LONGDOUBLE;

       

#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 114 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern int * __imp___mb_cur_max;
# 140 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);



  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);

  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);

  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);




  extern __attribute__((dllimport)) char *_sys_errlist[1];
  extern __attribute__((dllimport)) int _sys_nerr;
# 180 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern int * __imp___argc;







  extern char *** __imp___argv;







  extern wchar_t *** __imp___wargv;
# 208 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern char *** __imp__environ;
# 217 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern wchar_t *** __imp__wenviron;
# 226 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern char ** __imp__pgmptr;
# 235 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern wchar_t ** __imp__wpgmptr;



  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);




  extern int * __imp__fmode;



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);





  extern unsigned int * __imp__osplatform;
# 265 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * __imp__osver;
# 274 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * __imp__winver;
# 283 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * __imp__winmajor;
# 292 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * __imp__winminor;




  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);
# 315 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));






       

  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);
       



  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));


  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 420 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ nptr, char ** __restrict__ endptr);

  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);






  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);


       
       


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
       
       

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
# 500 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);


  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 563 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);



  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

       
       


  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       


  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 634 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);
# 692 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 3
#pragma pack(pop)

# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 1 3
# 9 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 2 3







  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _putenv_s(const char *_Name,const char *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
 



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
 





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) qsort_s(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(void *,const void *,const void *),void *_Context);
# 695 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 1 3
# 11 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
#pragma pack(push,_CRT_PACKING)
# 46 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 65 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
       
       
# 97 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
       
       




void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 144 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 163 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 209 "C:/Strawberry/c/x86_64-w64-mingw32/include/malloc.h" 3
#pragma pack(pop)
# 696 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 8 "test/../types.h" 2
# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdint.h" 1 3 4
# 9 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdint.h" 3 4
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdint.h" 1 3 4
# 32 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdint.h" 3 4
# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stddef.h" 1 3 4
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stddef.h" 1 3 4
# 24 "C:/Strawberry/c/x86_64-w64-mingw32/include/stddef.h" 3 4
  __attribute__ ((__dllimport__)) extern unsigned long __attribute__((__cdecl__)) __threadid(void);

  __attribute__ ((__dllimport__)) extern uintptr_t __attribute__((__cdecl__)) __threadhandle(void);
# 2 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stddef.h" 2 3 4
# 427 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 438 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stddef.h" 3 4
} max_align_t;
# 33 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdint.h" 2 3 4


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
__extension__ typedef long long int64_t;
__extension__ typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
__extension__ typedef long long int_least64_t;
__extension__ typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
__extension__ typedef long long int_fast64_t;
__extension__ typedef unsigned long long uint_fast64_t;


__extension__ typedef long long intmax_t;
__extension__ typedef unsigned long long uintmax_t;
# 10 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdint.h" 2 3 4
# 9 "test/../types.h" 2
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_print_push.h" 1 3
# 11 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 2 3
# 25 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
#pragma pack(push,_CRT_PACKING)
# 41 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;





  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 80 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };
# 178 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 192 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 207 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 231 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);


  int __attribute__((__cdecl__)) iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  wchar_t *__attribute__((__cdecl__)) _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t __attribute__((__cdecl__)) _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int __attribute__((__cdecl__)) _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wsetlocale(int _Category,const wchar_t *_Locale);




  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);




  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
# 378 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;



# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_off_t.h" 1 3




  typedef long _off_t;

  typedef long off32_t;





  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 26 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_off_t.h" 3
typedef off32_t off_t;
# 393 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 2 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_stat64.h" 1 3
# 19 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_stat64.h" 3
  struct _stat32 {
    _dev_t st_dev;
   _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 394 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 2 3




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int __attribute__((__cdecl__)) _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 412 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwch(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwche(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  wint_t __attribute__((__cdecl__)) _putwch_nolock(wchar_t _WCh);
  wint_t __attribute__((__cdecl__)) _getwch_nolock(void);
  wint_t __attribute__((__cdecl__)) _getwche_nolock(void);
  wint_t __attribute__((__cdecl__)) _ungetwch_nolock(wint_t _WCh);





                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);


                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 598 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  int __attribute__((__cdecl__)) fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  int __attribute__((__cdecl__)) wscanf(const wchar_t * __restrict__ _Format,...) ;

  int __attribute__((__cdecl__)) __ms_vwscanf (const wchar_t * __restrict__ , va_list);
  int __attribute__((__cdecl__)) __ms_vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int __attribute__((__cdecl__)) __ms_vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
  {
    return __ms_vfwscanf (__stream, __format, __local_argv);
  }

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (2)))
  int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)
  {
    return __ms_vswscanf( __source, __format, __local_argv );
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__ ((__nonnull__ (1)))
  int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
  {
    return __ms_vwscanf (__format, __local_argv);
  }



  int __attribute__((__cdecl__)) fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) wprintf(const wchar_t * __restrict__ _Format,...);
  int __attribute__((__cdecl__)) vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
# 642 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_l(wchar_t * __restrict__ ,size_t _SizeInWords,const wchar_t * __restrict__ _Format,_locale_t _Locale,... ) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;




       
       


  int __attribute__((__cdecl__)) __ms_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int __attribute__((__cdecl__)) __ms_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...)
  {
    int r;
    va_list argp;
    __builtin_va_start (argp, format);
    r = _vsnwprintf (s, n, format, argp);
    __builtin_va_end (argp);
    return r;
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  int __attribute__((__cdecl__)) vsnwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, va_list arg)
  {
    return _vsnwprintf(s,n,format,arg);
  }
       
       




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_l(wchar_t * __restrict__ _Dest,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;


# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/swprintf.inl" 1 3
# 21 "C:/Strawberry/c/x86_64-w64-mingw32/include/swprintf.inl" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}
# 728 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 2 3
# 737 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;





  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 851 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
  wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wasctime(const struct tm *_Tm);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  wchar_t *__attribute__((__cdecl__)) _wctime32(const __time32_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrdate(wchar_t *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrtime(wchar_t *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wctime64(const __time64_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);



  wchar_t *__attribute__((__cdecl__)) _wctime(const time_t *_Time) ;
# 951 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  errno_t __attribute__((__cdecl__)) _wctime_s(wchar_t *, size_t, const time_t *);
# 963 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
  typedef int mbstate_t;
  typedef wchar_t _Wint_t;

  wint_t __attribute__((__cdecl__)) btowc(int);
  size_t __attribute__((__cdecl__)) mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int __attribute__((__cdecl__)) wctob(wint_t _WCh);


  wchar_t *__attribute__((__cdecl__)) wmemset(wchar_t *s, wchar_t c, size_t n);
  wchar_t *__attribute__((__cdecl__)) wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int __attribute__((__cdecl__)) wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t *__attribute__((__cdecl__)) wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * __attribute__((__cdecl__)) wmempcpy (wchar_t *_Dst, const wchar_t *_Src, size_t _Size);
  wchar_t *__attribute__((__cdecl__)) wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int __attribute__((__cdecl__)) fwide(FILE *stream,int mode);
  int __attribute__((__cdecl__)) mbsinit(const mbstate_t *ps);
  __extension__ long long __attribute__((__cdecl__)) wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long __attribute__((__cdecl__)) wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 1038 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 1052 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 1061 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 3
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);







#pragma pack(pop)

# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 1 3
# 9 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 2 3
# 28 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _waccess_s (const wchar_t *_Filename,int _AccessMode);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wmktemp_s (wchar_t *_TemplateName,size_t _SizeInWords);




  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _cgetws_s (wchar_t *_Buffer,size_t _SizeInWords,size_t *_SizeRead);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _cwprintf_s (const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_s(const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vcwprintf_s (const wchar_t *_Format,va_list _ArgList);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _cwprintf_s_l (const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vcwprintf_s_l (const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws_s(wchar_t *_Str,size_t _SizeInWords);
  int __attribute__((__cdecl__)) fwprintf_s(FILE *_File,const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) wprintf_s(const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) vfwprintf_s(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf_s(const wchar_t *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vswprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,va_list _ArgList);
 

  int __attribute__((__cdecl__)) swprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_s_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_s_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) swscanf_s(const wchar_t *_Src,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfreopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wtmpnam_s(wchar_t *_DstBuf,size_t _SizeInWords);
# 120 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t *_Dst, rsize_t _DstSize, const wchar_t *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t *_Dst, rsize_t _DstSize, const wchar_t *_Src);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncpy_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncpy_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val, size_t _Count,_locale_t _Locale);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) size_t __attribute__((__cdecl__)) wcsnlen_s(const wchar_t * _src, size_t _count) {
    return _src ? wcsnlen(_src, _count) : 0;
  }




  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);
# 165 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbsrtowcs_s(size_t *_Retval,wchar_t *_Dst,size_t _SizeInWords,const char **_PSrc,size_t _N,mbstate_t *_State);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcrtomb_s(size_t *_Retval,char *_Dst,size_t _SizeInBytes,wchar_t _Ch,mbstate_t *_State);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsrtombs_s(size_t *_Retval,char *_Dst,size_t _SizeInBytes,const wchar_t **_Src,size_t _Size,mbstate_t *_State);
 

  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) wmemcpy_s (wchar_t *_dest,size_t _numberOfElements,const wchar_t *_src,size_t _count);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) wmemmove_s(wchar_t *_dest,size_t _numberOfElements,const wchar_t *_src,size_t _count);
# 1072 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 2 3

# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_print_pop.h" 1 3
# 1074 "C:/Strawberry/c/x86_64-w64-mingw32/include/wchar.h" 2 3
# 10 "test/../types.h" 2
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/string.h" 1 3
# 45 "C:/Strawberry/c/x86_64-w64-mingw32/include/string.h" 3
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
  char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;
       

  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);
       
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);







  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;
# 190 "C:/Strawberry/c/x86_64-w64-mingw32/include/string.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/string_s.h" 1 3
# 9 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/string_s.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/string.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/string_s.h" 2 3
# 26 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/string_s.h" 3
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strset_s(char *_Dst,size_t _DstSize,int _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcpy_s(char *_Dst, rsize_t _SizeInBytes, const char *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncpy_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncpy_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) strtok_s(char *_Str,const char *_Delim,char **_Context);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcat_s(char *_Dst, rsize_t _SizeInBytes, const char * _Src);
 

  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
# 191 "C:/Strawberry/c/x86_64-w64-mingw32/include/string.h" 2 3
# 11 "test/../types.h" 2



# 13 "test/../types.h"
typedef _Bool bool;



typedef int8_t s8;
typedef int16_t s16;
typedef int32_t s32;
typedef int64_t s64;

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef float f32;
typedef double f64;

typedef u8 byte;
typedef char* raw_string;
typedef u32 uchar;
typedef void* raw_pointer;


typedef struct {
    bool eq : 1;
    bool ne : 1;
    bool gt : 1;
    bool ge : 1;
    bool lt : 1;
    bool le : 1;
} cmp_result;


typedef raw_pointer (*copy_function)(raw_pointer);
typedef void (*del_function)(raw_pointer);
typedef size_t (*hash_function)(raw_pointer, size_t);
typedef cmp_result (*cmp_function)(raw_pointer, raw_pointer);





typedef struct {
    uchar* val;
    size_t len;
    size_t mem;
} __cmodules_string_struct;
typedef __cmodules_string_struct* string;




# 1 "test/../src/types_array.c" 1

typedef struct {
    raw_pointer* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_pointer_array_struct;
typedef __cmodules_pointer_array_struct* pointer_array;


typedef struct {
    s16* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_int16_array_struct;
typedef __cmodules_int16_array_struct* int16_array;

typedef struct {
    s32* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_int32_array_struct;
typedef __cmodules_int32_array_struct* int32_array;

typedef struct {
    s64* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_int64_array_struct;
typedef __cmodules_int64_array_struct* int64_array;


typedef struct {
    f32* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_float32_array_struct;
typedef __cmodules_float32_array_struct* float32_array;

typedef struct {
    f64* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_float64_array_struct;
typedef __cmodules_float64_array_struct* float64_array;
# 66 "test/../types.h" 2
typedef struct {
    byte* val;
    size_t len;
    size_t mem;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
} __cmodules_array_struct;
typedef __cmodules_array_struct* array;





typedef struct __cmodules_list_node_struct{
    raw_pointer val;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
    struct __cmodules_list_node_struct* next;
} __cmodules_list_node_struct;
typedef __cmodules_list_node_struct* list_node;

typedef struct {
    list_node head;
    size_t len;
} __cmodules_list_struct;
typedef __cmodules_list_struct* list;

typedef struct {
    list_node head;
    size_t len;
} __cmodules_stack_struct;
typedef __cmodules_stack_struct* stack;




typedef struct __cmodules_fifo_node_struct{
    raw_pointer val;
    raw_string type_id;
    size_t type_size;
    copy_function type_copy;
    del_function type_del;
    cmp_function type_cmp;
    struct __cmodules_fifo_node_struct* prev;
    struct __cmodules_fifo_node_struct* next;
} __cmodules_fifo_node_struct;
typedef __cmodules_fifo_node_struct* fifo_node;

typedef struct {
    fifo_node head;
    fifo_node tail;
    size_t len;
} __cmodules_fifo_struct;
typedef __cmodules_fifo_struct* fifo;
# 135 "test/../types.h"
raw_pointer __cmodules_stack_pop(stack);
raw_pointer __cmodules_fifo_pop (fifo);
# 146 "test/../types.h"
list_node __cmodules_stack_pop_node(stack);
fifo_node __cmodules_fifo_pop_node (fifo);



typedef struct __cmodules_dict_node_struct {
    raw_pointer val;
    raw_pointer key;
    bool has_collision;
    struct __cmodules_dict_node_struct* next_for_key;
} __cmodules_dict_node_struct;
typedef __cmodules_dict_node_struct* dict_node;

typedef struct {
    dict_node* vals;
    raw_pointer* keys;
    size_t len;
    size_t bucket_size;
    raw_string key_type_id;
    size_t key_type_size;
    raw_string val_type_id;
    size_t val_type_size;
    copy_function key_type_copy;
    del_function key_type_del;
    cmp_function key_type_cmp;
    copy_function val_type_copy;
    del_function val_type_del;
    cmp_function val_type_cmp;
    hash_function hash_key;
} __cmodules_dict_struct;
typedef __cmodules_dict_struct* dict;

dict_node __cmodules_dict_get_node(dict, raw_pointer);
bool __cmodules_dict_has_key (dict, raw_pointer);

typedef struct {
    raw_pointer key;
    raw_pointer val;
    size_t pos;
} dict_pair;



typedef struct {
    list_node head;
    size_t len;
} __cmodules_set_struct;
typedef __cmodules_set_struct* set;

bool __cmodules_set_has_node(set, list_node);
# 211 "test/../types.h"
string __cmodules_string_new (size_t, ...);

array __cmodules_array_new (const raw_string, size_t, size_t, size_t, raw_pointer);

list __cmodules_list_new ();

fifo __cmodules_fifo_new ();

stack __cmodules_stack_new ();

dict __cmodules_dict_new (const raw_string, size_t, const raw_string, size_t);

set __cmodules_set_new ();
# 240 "test/../types.h"
void __cmodules_string_del (string);
void __cmodules_array_del (array);
void __cmodules_list_del (list);
void __cmodules_fifo_del (fifo);
void __cmodules_stack_del (stack);
void __cmodules_dict_del (dict);
void __cmodules_set_del (set);

void __cmodules_list_node_del(list_node);
void __cmodules_fifo_node_del(fifo_node);
# 265 "test/../types.h"
string __cmodules_string_copy (string);
array __cmodules_array_copy (array);
list __cmodules_list_copy (list);
fifo __cmodules_fifo_copy (fifo);
stack __cmodules_stack_copy (stack);
dict __cmodules_dict_copy (dict);
set __cmodules_set_copy (set);

list_node __cmodules_list_node_copy(list_node);
fifo_node __cmodules_fifo_node_copy(fifo_node);
# 293 "test/../types.h"
string __cmodules_string_add (string, raw_string);
array __cmodules_array_add (array, size_t, raw_pointer*);
list __cmodules_list_add (list, raw_string, size_t, raw_pointer);
fifo __cmodules_fifo_add (fifo, raw_string, size_t, raw_pointer);
stack __cmodules_stack_add (stack, raw_string, size_t, raw_pointer);
dict __cmodules_dict_add (dict, raw_pointer, raw_pointer);
set __cmodules_set_add (set, raw_string, size_t, raw_pointer);
# 312 "test/../types.h"
void __cmodules_string_rem (string, size_t);
void __cmodules_array_rem (array, size_t);
void __cmodules_list_rem (list, size_t);
void __cmodules_dict_rem (dict, raw_pointer);
void __cmodules_set_rem (set, size_t);
# 331 "test/../types.h"
void __cmodules_string_clear (string);
void __cmodules_array_clear (array);
void __cmodules_list_clear (list);
void __cmodules_fifo_clear (fifo);
void __cmodules_stack_clear (stack);
void __cmodules_dict_clear (dict);
void __cmodules_set_clear (set);
# 352 "test/../types.h"
bool __cmodules_string_contains(string, string);
bool __cmodules_array_contains (array, raw_pointer);
bool __cmodules_list_contains (list, raw_string, size_t, raw_pointer);
bool __cmodules_fifo_contains (fifo, raw_string, size_t, raw_pointer);
bool __cmodules_stack_contains (stack, raw_string, size_t, raw_pointer);
bool __cmodules_dict_contains (dict, raw_pointer);
bool __cmodules_set_contains (set, raw_string, size_t, raw_pointer);
# 370 "test/../types.h"
size_t __cmodules_string_index(string, string);
size_t __cmodules_array_index (array, raw_pointer);
size_t __cmodules_list_index (list, raw_string, size_t, raw_pointer);
size_t __cmodules_set_index (set, raw_string, size_t, raw_pointer);
# 386 "test/../types.h"
string __cmodules_string_join (string, string);
array __cmodules_array_join (array, array);
list __cmodules_list_join (list, list);
dict __cmodules_dict_join (dict, dict);
set __cmodules_set_join (set, set);
# 402 "test/../types.h"
string __cmodules_string_slice(string, size_t, size_t);
array __cmodules_array_slice (array, size_t, size_t);
list __cmodules_list_slice (list, size_t, size_t);
set __cmodules_set_slice (set, size_t, size_t);
# 419 "test/../types.h"
string __cmodules_string_reverse(string);
array __cmodules_array_reverse (array);
list __cmodules_list_reverse (list);
stack __cmodules_stack_reverse (stack);
fifo __cmodules_fifo_reverse (fifo);
set __cmodules_set_reverse (set);
# 436 "test/../types.h"
string __cmodules_string_sort(string);
array __cmodules_array_sort (array);
list __cmodules_list_sort (list);
set __cmodules_set_sort (set);
# 452 "test/../types.h"
string __cmodules_string_map(string, uchar (*f)(uchar));
array __cmodules_array_map (array, raw_pointer (*f)(raw_pointer));
list __cmodules_list_map (list, raw_pointer (*f)(list_node));
dict __cmodules_dict_map (dict, raw_pointer (*f)(dict_node));
set __cmodules_set_map (set, raw_pointer (*f)(list_node));
# 469 "test/../types.h"
string __cmodules_string_filter(string, bool (*f)(uchar));
array __cmodules_array_filter (array, bool (*f)(raw_pointer));
list __cmodules_list_filter (list, bool (*f)(list_node));
dict __cmodules_dict_filter (dict, bool (*f)(dict_node));
set __cmodules_set_filter (set, bool (*f)(list_node));
# 486 "test/../types.h"
uchar __cmodules_string_reduce(string, uchar (*f)(uchar, uchar));
raw_pointer __cmodules_array_reduce (array, raw_pointer (*f)(raw_pointer, raw_pointer));
raw_pointer __cmodules_list_reduce (list, raw_pointer (*f)(raw_pointer, raw_pointer));
raw_pointer __cmodules_dict_reduce (dict, raw_pointer (*f)(raw_pointer, raw_pointer));
raw_pointer __cmodules_set_reduce (set, raw_pointer (*f)(raw_pointer, raw_pointer));
# 503 "test/../types.h"
uchar __cmodules_string_getval(string, size_t);
raw_pointer __cmodules_array_getval (array, size_t);
raw_pointer __cmodules_list_getval (list, size_t);
raw_pointer __cmodules_dict_getval (dict, raw_pointer);
raw_pointer __cmodules_set_getval (set, size_t);
# 520 "test/../types.h"
void __cmodules_string_setval(string, size_t, raw_pointer);
void __cmodules_array_setval (array, size_t, raw_pointer);
void __cmodules_list_setval (list, size_t, raw_pointer);
void __cmodules_dict_setval (dict, raw_pointer, raw_pointer);
void __cmodules_set_setval (set, size_t, raw_pointer);







void __cmodules_dict_get_next_pair(dict_pair* p, dict X) {
    (*p).pos += 1;
    if ((*p).pos == X->len)
        return;
    (*p).key = X->keys[(*p).pos];
    (*p).val = __cmodules_dict_getval(X,(*p).key);
}
# 551 "test/../types.h"
size_t __cmodules_config_default_container_length = 2 << 13;



copy_function (*__cmodules_copy_function_hook)(raw_string) = 
# 555 "test/../types.h" 3 4
                                                            ((void *)0)
# 555 "test/../types.h"
                                                                ;
cmp_function (*__cmodules_cmp_function_hook)(raw_string) = 
# 556 "test/../types.h" 3 4
                                                            ((void *)0)
# 556 "test/../types.h"
                                                                ;
del_function (*__cmodules_del_function_hook)(raw_string) = 
# 557 "test/../types.h" 3 4
                                                            ((void *)0)
# 557 "test/../types.h"
                                                                ;
hash_function (*__cmodules_hash_function_hook)(raw_string) = 
# 558 "test/../types.h" 3 4
                                                            ((void *)0)
# 558 "test/../types.h"
                                                                ;

# 1 "test/../src/types.c" 1

# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdarg.h" 1 3 4
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdarg.h" 1 3 4
# 140 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdarg.h" 3 4
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_stdarg.h" 1 3 4
# 141 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdarg.h" 2 3 4
# 2 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdarg.h" 2 3 4
# 3 "test/../src/types.c" 2

# 1 "test/../src/copy.c" 1
raw_pointer __cmodules_trivial_copy(raw_pointer x) {
    return x;
}

raw_pointer __cmodules_raw_string_copy(raw_pointer x) {
    size_t length = strlen((raw_string) x);
    raw_string result = calloc(sizeof(char), (length));
    strcpy(result, (raw_string) x);
    return (raw_pointer) result;
}

raw_pointer __cmodules_string_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_string_copy((string) x);
}

raw_pointer __cmodules_array_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_array_copy((array) x);
}

raw_pointer __cmodules_list_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_list_copy((list) x);
}

raw_pointer __cmodules_stack_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_stack_copy((stack) x);
}

raw_pointer __cmodules_fifo_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_fifo_copy((fifo) x);
}

raw_pointer __cmodules_dict_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_dict_copy((dict) x);
}

raw_pointer __cmodules_set_copy_wrapper(raw_pointer x) {
    return (raw_pointer) __cmodules_set_copy((set) x);
}

copy_function __cmodules_get_copy_function(const raw_string type) {
    if (strcmp(type, "raw_string") == 0 ||
        strcmp(type, "uchar*") == 0 ||
        strcmp(type, "char*") == 0)
        return &__cmodules_raw_string_copy;
    else if (strcmp(type, "string") == 0)
        return &__cmodules_string_copy_wrapper;
    else if (strcmp(type, "array") == 0)
        return &__cmodules_array_copy_wrapper;
    else if (strcmp(type, "list") == 0)
        return &__cmodules_list_copy_wrapper;
    else if (strcmp(type, "stack") == 0)
        return &__cmodules_stack_copy_wrapper;
    else if (strcmp(type, "fifo") == 0)
        return &__cmodules_fifo_copy_wrapper;
    else if (strcmp(type, "dict") == 0)
        return &__cmodules_dict_copy_wrapper;
    else if (strcmp(type, "set") == 0)
        return &__cmodules_set_copy_wrapper;
    else {
        if (__cmodules_copy_function_hook != 
# 60 "test/../src/copy.c" 3 4
                                            ((void *)0)
# 60 "test/../src/copy.c"
                                                )
            return __cmodules_copy_function_hook(type);
        else
            return &__cmodules_trivial_copy;
    }
}
# 5 "test/../src/types.c" 2
# 1 "test/../src/del.c" 1
void __cmodules_trivial_del(raw_pointer x) {
    return;
}

void __cmodules_pointer_del(raw_pointer x) {
    free((void*)x);
}

void __cmodules_string_del_wrapper(raw_pointer x) {
    __cmodules_string_del((string) x);
}

void __cmodules_array_del_wrapper(raw_pointer x) {
    __cmodules_array_del((array) x);
}

void __cmodules_list_del_wrapper(raw_pointer x) {
    __cmodules_list_del((list) x);
}

void __cmodules_stack_del_wrapper(raw_pointer x) {
    __cmodules_stack_del((stack) x);
}

void __cmodules_fifo_del_wrapper(raw_pointer x) {
    __cmodules_fifo_del((fifo) x);
}

void __cmodules_dict_del_wrapper(raw_pointer x) {
    __cmodules_dict_del((dict) x);
}

void __cmodules_set_del_wrapper(raw_pointer x) {
    __cmodules_set_del((set) x);
}

del_function __cmodules_get_del_function(const raw_string type) {
    if (strcmp(type, "raw_string") == 0 ||
        strcmp(type, "raw_pointer") == 0)
        return &__cmodules_pointer_del;
    else if (strcmp(type, "string") == 0)
        return &__cmodules_string_del_wrapper;
    else if (strcmp(type, "array") == 0)
        return &__cmodules_array_del_wrapper;
    else if (strcmp(type, "list") == 0)
        return &__cmodules_list_del_wrapper;
    else if (strcmp(type, "stack") == 0)
        return &__cmodules_stack_del_wrapper;
    else if (strcmp(type, "fifo") == 0)
        return &__cmodules_fifo_del_wrapper;
    else if (strcmp(type, "dict") == 0)
        return &__cmodules_dict_del_wrapper;
    else if (strcmp(type, "set") == 0)
        return &__cmodules_set_del_wrapper;
    else {
        if (__cmodules_del_function_hook != 
# 56 "test/../src/del.c" 3 4
                                           ((void *)0)
# 56 "test/../src/del.c"
                                               )
            return __cmodules_del_function_hook(type);
        else
            return &__cmodules_trivial_del;
    }
}
# 6 "test/../src/types.c" 2
# 1 "test/../src/hash.c" 1
# 12 "test/../src/hash.c"
size_t __cmodules_hash_int(raw_pointer key, size_t bucket_size) {
    return ((intptr_t) key) % bucket_size;
}

size_t __cmodules_hash_string(raw_pointer _key, size_t bucket_size) {



    const raw_string key = (raw_string) _key;
    size_t key_length = strlen(key);
    size_t hash_value = key[0];
    size_t param = 97;
    for (int i = 1; i < key_length; i++) {
        hash_value += (key[i] - ' ') * param;
        hash_value %= bucket_size;
        param *= param;
        param %= bucket_size;
    }

    return hash_value;
}

size_t __cmodules_hash_string_object(raw_pointer key, size_t bucket_size) {
    return __cmodules_hash_string((raw_pointer) ((string) key)->val, bucket_size);
}

hash_function __cmodules_get_hash_function(const raw_string type) {
    if (strcmp(type, "raw_string") == 0 ||
        strcmp(type, "char*") == 0 ||
        strcmp(type, "uchar*") == 0)
            return &__cmodules_hash_string;
    else if (strcmp(type, "string") == 0)
            return &__cmodules_hash_string_object;
    else {
            if (__cmodules_hash_function_hook != 
# 46 "test/../src/hash.c" 3 4
                                                ((void *)0)
# 46 "test/../src/hash.c"
                                                    )
                return __cmodules_hash_function_hook(type);
            else
                return &__cmodules_hash_int;
    }
}
# 7 "test/../src/types.c" 2
# 1 "test/../src/cmp.c" 1
# 14 "test/../src/cmp.c"
cmp_result __cmodules_generic_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_raw_string_cmp(raw_pointer, raw_pointer);
cmp_result __cmodules_string_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_array_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_list_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_stack_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_fifo_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_dict_cmp (raw_pointer, raw_pointer);
cmp_result __cmodules_set_cmp (raw_pointer, raw_pointer);

cmp_function __cmodules_get_cmp_function(const raw_string type) {
    if (strcmp(type, "raw_string") == 0)
        return &__cmodules_raw_string_cmp;
    else if (strcmp(type, "string") == 0)
        return &__cmodules_string_cmp;
    else if (strcmp(type, "array") == 0)
        return &__cmodules_array_cmp;
    else if (strcmp(type, "list") == 0)
        return &__cmodules_list_cmp;
    else if (strcmp(type, "stack") == 0)
        return &__cmodules_stack_cmp;
    else if (strcmp(type, "fifo") == 0)
        return &__cmodules_fifo_cmp;
    else if (strcmp(type, "dict") == 0)
        return &__cmodules_dict_cmp;
    else if (strcmp(type, "set") == 0)
        return &__cmodules_list_cmp;
    else {
        if (__cmodules_cmp_function_hook != 
# 42 "test/../src/cmp.c" 3 4
                                           ((void *)0)
# 42 "test/../src/cmp.c"
                                               )
            return __cmodules_cmp_function_hook(type);
        else
            return &__cmodules_generic_cmp;
    }
}

cmp_result __cmodules_generic_cmp(raw_pointer X, raw_pointer Y) {
    cmp_result result;
    bool greater = X > Y;
    bool equal = X == Y;

    result.eq = equal;
    result.ne = !equal;
    result.gt = greater;
    result.ge = greater || equal;
    result.lt = !greater && !equal;
    result.le = !greater;

    return result;
}

cmp_result __cmodules_raw_string_cmp(raw_pointer s1, raw_pointer s2) {
    size_t cmp = strcmp((raw_string) s1, (raw_string) s2);

    cmp_result result;

    result.eq = cmp == 0;
    result.ne = cmp != 0;
    result.ge = cmp >= 0;
    result.gt = cmp > 0;
    result.le = cmp <= 0;
    result.lt = cmp < 0;

    return result;
}

cmp_result __cmodules_string_cmp(raw_pointer X, raw_pointer Y) {
    string A = (string) X;
    string B = (string) Y;
    cmp_result result;
    s64 cmp;

    for (size_t i = 0; i < ((A->len) < (B->len) ? (A->len) : (B->len)); i++) {
        cmp = A->val[i] - B->val[i];
        if (cmp != 0)
            break;
    }
    if (cmp == 0 && A->len < B->len) {
        cmp = 1;
    }
    else if (cmp == 0 && A->len > B->len) {
        cmp = -1;
    }

    bool equal = cmp == 0;
    bool greater = cmp > 0;

    result.eq = equal;
    result.ne = !equal;
    result.gt = greater;
    result.ge = greater || equal;
    result.lt = !greater && !equal;
    result.le = !greater;

    return result;
}

cmp_result __cmodules_array_cmp(raw_pointer X, raw_pointer Y) {
    array A = (array) X;
    array B = (array) Y;
    cmp_result result;
    bool equal = ((_Bool) !0);

    if (A->len != B->len || strcmp(A->type_id, B->type_id) != 0) {
        equal = ((_Bool) 0);
    }
    else {
        byte* x = A->val;
        byte* y = B->val;
        for (size_t i = 0; i < A->len; i++) {
            if (A->type_cmp((raw_pointer) x, (raw_pointer) y).ne) {
                equal = ((_Bool) 0);
                break;
            }
            x += A->type_size;
            y += B->type_size;
        }
    }

    result.eq = equal;
    result.ne = !equal;
    result.gt = ((_Bool) 0);
    result.ge = equal;
    result.lt = ((_Bool) 0);
    result.le = equal;

    return result;
}

cmp_result __cmodules_list_cmp(raw_pointer X, raw_pointer Y) {
    list A = (list) X;
    list B = (list) Y;
    cmp_result result;
    bool equal = ((_Bool) !0);

    if ((A->len) != (B->len)) {
        equal = ((_Bool) 0);
    }
    else {
        list_node nodeX = A->head;
        list_node nodeY = B->head;
        for (size_t i = 0; i < (A->len); i++) {
            if (strcmp(nodeX->type_id, nodeY->type_id) != 0) {
                equal = ((_Bool) 0);
                break;
            }

            cmp_function cmp_func = __cmodules_get_cmp_function(nodeX->type_id);
            if (cmp_func((raw_pointer) nodeX->val, (raw_pointer) nodeY->val).ne) {
                equal = ((_Bool) 0);
                break;
            }

            nodeX = nodeX->next;
            nodeY = nodeY->next;
        }
    }

    result.eq = equal;
    result.ne = !equal;
    result.gt = ((_Bool) 0);
    result.ge = equal;
    result.lt = ((_Bool) 0);
    result.le = equal;

    return result;
}

cmp_result __cmodules_stack_cmp(raw_pointer X, raw_pointer Y) {
    stack A = (stack) X;
    stack B = (stack) Y;
    cmp_result result;
    bool equal = ((_Bool) !0);

    if ((A->len) != (B->len)) {
        equal = ((_Bool) 0);
    }
    else {
        list_node nodeX = A->head;
        list_node nodeY = B->head;
        for (size_t i = 0; i < (A->len); i++) {
            if (strcmp(nodeX->type_id, nodeY->type_id) != 0) {
                equal = ((_Bool) 0);
                break;
            }

            cmp_function cmp_func = __cmodules_get_cmp_function(nodeX->type_id);
            if (cmp_func((raw_pointer) nodeX->val, (raw_pointer) nodeY->val).ne) {
                equal = ((_Bool) 0);
                break;
            }

            nodeX = nodeX->next;
            nodeY = nodeY->next;
        }
    }

    result.eq = equal;
    result.ne = !equal;
    result.gt = ((_Bool) 0);
    result.ge = equal;
    result.lt = ((_Bool) 0);
    result.le = equal;

    return result;
}

cmp_result __cmodules_fifo_cmp(raw_pointer X, raw_pointer Y) {
    fifo A = (fifo) X;
    fifo B = (fifo) Y;
    cmp_result result;
    bool equal = ((_Bool) !0);

    if ((A->len) != (B->len)) {
        equal = ((_Bool) 0);
    }
    else {
        fifo_node nodeX = A->head;
        fifo_node nodeY = B->head;
        for (size_t i = 0; i < (A->len); i++) {
            if (strcmp(nodeX->type_id, nodeY->type_id) != 0) {
                equal = ((_Bool) 0);
                break;
            }

            cmp_function cmp_func = __cmodules_get_cmp_function(nodeX->type_id);
            if (cmp_func((raw_pointer) nodeX->val, (raw_pointer) nodeY->val).ne) {
                equal = ((_Bool) 0);
                break;
            }

            nodeX = nodeX->next;
            nodeY = nodeY->next;
        }
    }

    result.eq = equal;
    result.ne = !equal;
    result.gt = ((_Bool) 0);
    result.ge = equal;
    result.lt = ((_Bool) 0);
    result.le = equal;

    return result;
}

cmp_result __cmodules_dict_cmp(raw_pointer X, raw_pointer Y) {
    dict A = (dict) X;
    dict B = (dict) Y;
    cmp_result result;
    bool equal = ((_Bool) !0);

    if ((A->len) != (B->len) ||
        strcmp(A->key_type_id, B->key_type_id) != 0 ||
        strcmp(A->val_type_id, B->val_type_id) != 0 ||
        A->hash_key != B->hash_key)
    { equal = ((_Bool) 0); }
    else {

        for (size_t i = 0; i < (A->len); i++) {
            void* keyX = A->keys[i];
            bool is_in_Y = ((_Bool) 0);
            for (size_t j = 0; j < (B->len); j++) {
                void* keyY = B->keys[j];
                if (A->key_type_cmp((raw_pointer) keyX, (raw_pointer) keyY).eq) {
                    is_in_Y = ((_Bool) !0);
                    break;
                }
            }
            if (!is_in_Y) {
                equal = ((_Bool) 0);
                break;
            }
        }


        for (size_t i = 0; i < (A->len); i++) {
            raw_string key = A->keys[i];
            dict_node nodeX = __cmodules_dict_get_node(A, key);
            dict_node nodeY = __cmodules_dict_get_node(B, key);
            if (A->val_type_cmp((raw_pointer) nodeX->val, (raw_pointer) nodeY->val).ne) {
                equal = ((_Bool) 0);
                break;
            }
        }
    }

    result.eq = equal;
    result.ne = !equal;
    result.gt = ((_Bool) 0);
    result.ge = equal;
    result.lt = ((_Bool) 0);
    result.le = equal;

    return result;
}

cmp_result __cmodules_set_cmp(raw_pointer X, raw_pointer Y) {
    set A = (set) X;
    set B = (set) Y;
    cmp_result result;
    bool equal = ((_Bool) !0);

    if ((A->len) != (B->len)) {
        equal = ((_Bool) 0);
    }
    else {
        list_node nodeX = A->head;
        list_node nodeY = B->head;
        for (size_t i = 0; i < (A->len); i++) {
            if (strcmp(nodeX->type_id, nodeY->type_id) != 0) {
                equal = ((_Bool) 0);
                break;
            }

            cmp_function cmp_func = __cmodules_get_cmp_function(nodeX->type_id);
            if (cmp_func((raw_pointer) nodeX->val, (raw_pointer) nodeY->val).ne) {
                equal = ((_Bool) 0);
                break;
            }

            nodeX = nodeX->next;
            nodeY = nodeY->next;
        }
    }

    result.eq = equal;
    result.ne = !equal;
    result.gt = ((_Bool) 0);
    result.ge = equal;
    result.lt = ((_Bool) 0);
    result.le = equal;

    return result;
}
# 8 "test/../src/types.c" 2
# 1 "test/../src/types_new.c" 1

# 1 "test/../src/utf8.c" 1
void code_point_to_utf8(char* str, uchar code_point) {
    char val[4] = {0, 0, 0, 0};
    size_t cln = 0;


    if (code_point < 0x0080) {
        val[0] = 0 | code_point;
        cln = 1;
    }

    else if (code_point < 0x0800) {
        u8 byte0 = (code_point & 0xF80) >> 6;
        u8 byte1 = (code_point & 0x07F);
        val[0] = 0xC0 | byte0;
        val[1] = 0x80 | byte1;
        cln = 2;
    }

    else if (code_point < 0x10000) {
        u8 byte0 = (code_point & 0xF000) >> 12;
        u8 byte1 = (code_point & 0x0FC0) >> 6;
        u8 byte2 = (code_point & 0x003F);
        val[0] = 0xE0 | byte0;
        val[1] = 0x80 | byte1;
        val[2] = 0x80 | byte2;
        cln = 3;
    }

    else {
        u8 byte0 = (code_point & 0x1C0000) >> 18;
        u8 byte1 = (code_point & 0x03F000) >> 12;
        u8 byte2 = (code_point & 0x000FC0) >> 6;
        u8 byte3 = (code_point & 0x00003F);
        val[0] = 0xE0 | byte0;
        val[1] = 0x80 | byte1;
        val[2] = 0x80 | byte2;
        val[3] = 0x80 | byte3;
        cln = 4;
    }

    strncpy(str, val, cln);
}

uchar utf8_to_code_point(char* str) {
    if (str == 
# 45 "test/../src/utf8.c" 3 4
              ((void *)0)
# 45 "test/../src/utf8.c"
                  )
        return 0;

    uchar utf8_char;
    char first = str[0];


    if ((first & 0x80) == 0) {
        return (uchar) first;
    }

    else if ((first & 0xD0) == 0xC0) {
        utf8_char = (uchar) ((u16*) str)[0];
        uchar byte0 = utf8_char & 0x3F;
        uchar byte1 = utf8_char & (0x1F << 8);
        return (byte1 >> 2) | byte0;
    }

    else if ((first & 0xF0) == 0xD0) {
        utf8_char = (uchar) (((u32*) str)[0] >> 8);
        uchar byte0 = utf8_char & 0x3F;
        uchar byte1 = utf8_char & (0x3F << 8);
        uchar byte2 = utf8_char & (0x0F << 16);
        return (byte2 >> 4) | (byte1 >> 2) | byte0;
    }

    else if ((first & 0xF8) == 0xF0) {
        utf8_char = (uchar) (((u32*) str)[0]);
        uchar byte0 = utf8_char & 0x3F;
        uchar byte1 = utf8_char & (0x3F << 8);
        uchar byte2 = utf8_char & (0x3F << 16);
        uchar byte3 = utf8_char & (0x07 << 24);
        return (byte3 >> 6) | (byte2 >> 4) | (byte1 >> 2) | byte0;
    }

    else {
        return 0;
    }
}

size_t code_point_size(uchar code_point) {

    if (code_point < 0x0080) {
        return 1;
    }

    else if (code_point < 0x0800) {
        return 2;
    }

    else if (code_point < 0x10000) {
        return 3;
    }

    else {
        return 4;
    }
}
# 3 "test/../src/types_new.c" 2
string __cmodules_string_new (size_t argnum, ...) {
    string result = malloc(sizeof(__cmodules_string_struct));

    if (argnum > 1) {
        va_list args;
        
# 8 "test/../src/types_new.c" 3 4
       __builtin_va_start(
# 8 "test/../src/types_new.c"
       args
# 8 "test/../src/types_new.c" 3 4
       ,
# 8 "test/../src/types_new.c"
       argnum
# 8 "test/../src/types_new.c" 3 4
       )
# 8 "test/../src/types_new.c"
                             ;
        char* arg = 
# 9 "test/../src/types_new.c" 3 4
                     __builtin_va_arg(
# 9 "test/../src/types_new.c"
                     args
# 9 "test/../src/types_new.c" 3 4
                     ,
# 9 "test/../src/types_new.c"
                     char*
# 9 "test/../src/types_new.c" 3 4
                     )
# 9 "test/../src/types_new.c"
                                        ;
        size_t len = strlen(arg);
        uchar* val = calloc(sizeof(uchar), ((((len+1)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length)));
        for (size_t i = 0; i < len; i++) {
            val[i] = utf8_to_code_point(arg);
            arg += code_point_size(val[i]);
        }
        
# 16 "test/../src/types_new.c" 3 4
       __builtin_va_end(
# 16 "test/../src/types_new.c"
       args
# 16 "test/../src/types_new.c" 3 4
       )
# 16 "test/../src/types_new.c"
                   ;

        result->val = val;
        result->len = len;
        result->mem = (((len+1)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length);
    }
    else {
        result->val = calloc(sizeof(char), (__cmodules_config_default_container_length));
        result->len = 0;
        result->mem = __cmodules_config_default_container_length;
    }

    return result;
}

array __cmodules_array_new(const raw_string type, size_t type_size, size_t length, size_t init_length, void* init_const) {
    array result = malloc(sizeof(__cmodules_array_struct));

    result->mem = (((type_size*length)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length);
    result->val = calloc(sizeof(byte), (result->mem));
    result->len = length;
    result->type_id = calloc(sizeof(char), (strlen(type)));
    result->type_size = type_size;
    result->type_copy = __cmodules_get_copy_function(type);
    result->type_del = __cmodules_get_del_function(type);
    result->type_cmp = __cmodules_get_cmp_function(type);
    strcpy(result->type_id, type);

    if (init_length > 0) {
        void* result_alias = result->val;
        void* initializer = init_const;

        for (size_t i = 0; i < init_length; i++) {
            memcpy(result_alias, initializer, type_size);
            initializer += type_size;
            result_alias += type_size;
        }
    }

    return result;
}

list __cmodules_list_new() {
    list result = malloc(sizeof(__cmodules_list_struct));

    result->head = 
# 61 "test/../src/types_new.c" 3 4
                  ((void *)0)
# 61 "test/../src/types_new.c"
                      ;
    result->len = 0;

    return result;
}

stack __cmodules_stack_new() {
    stack result = malloc(sizeof(__cmodules_stack_struct));

    result->head = 
# 70 "test/../src/types_new.c" 3 4
                  ((void *)0)
# 70 "test/../src/types_new.c"
                      ;
    result->len = 0;

    return result;
}

fifo __cmodules_fifo_new() {
    fifo result = malloc(sizeof(__cmodules_fifo_struct));

    result->head = 
# 79 "test/../src/types_new.c" 3 4
                  ((void *)0)
# 79 "test/../src/types_new.c"
                      ;
    result->tail = 
# 80 "test/../src/types_new.c" 3 4
                  ((void *)0)
# 80 "test/../src/types_new.c"
                      ;
    result->len = 0;

    return result;
}

dict __cmodules_dict_new(const raw_string key_type, size_t key_type_size, const raw_string val_type, size_t val_type_size) {
    dict result = malloc(sizeof(__cmodules_dict_struct));

    result->bucket_size = __cmodules_config_default_container_length / sizeof(dict_node);
    result->len = 0;
    result->vals = calloc(sizeof(dict_node), (result->bucket_size));
    result->keys = calloc(sizeof(u8), (result->bucket_size * key_type_size));
# 102 "test/../src/types_new.c"
    size_t string_len = strlen(key_type);
    result->key_type_id = calloc(sizeof(char), (string_len+1));
    strcpy(result->key_type_id, key_type);

    string_len = strlen(val_type);
    result->val_type_id = calloc(sizeof(char), (string_len+1));
    strcpy(result->val_type_id, val_type);

    result->key_type_size = key_type_size;
    result->val_type_size = val_type_size;

    result->key_type_copy = __cmodules_get_copy_function(key_type);
    result->key_type_del = __cmodules_get_del_function(key_type);
    result->key_type_cmp = __cmodules_get_cmp_function(key_type);
    result->val_type_copy = __cmodules_get_copy_function(val_type);
    result->val_type_del = __cmodules_get_del_function(val_type);
    result->val_type_cmp = __cmodules_get_cmp_function(val_type);

    result->hash_key = __cmodules_get_hash_function(key_type);

    return result;
}

set __cmodules_set_new() {
    set result = malloc(sizeof(__cmodules_set_struct));

    result->head = 
# 128 "test/../src/types_new.c" 3 4
                  ((void *)0)
# 128 "test/../src/types_new.c"
                      ;
    result->len = 0;

    return result;
}
# 9 "test/../src/types.c" 2
# 1 "test/../src/types_del.c" 1

void __cmodules_string_del(string s) {
    free(s->val);
    free(s);
}

void __cmodules_array_del(array a) {
    if (a->type_size >= sizeof(void*)) {
        for (size_t i = 0; i < a->len; i += a->type_size) {
            a->type_del(a->val + i);
        }
    }

    free(a->val);
    free(a);
}

void __cmodules_list_del(list l) {
    list_node node = l->head;

    while (node != 
# 21 "test/../src/types_del.c" 3 4
                  ((void *)0)
# 21 "test/../src/types_del.c"
                      ) {
        list_node next_node = node->next;
        node->type_del(node->val);
        free(node);
        node = next_node;
    }
    free(l);
}

void __cmodules_stack_del(stack l) {
    list_node node = l->head;

    while (node != 
# 33 "test/../src/types_del.c" 3 4
                  ((void *)0)
# 33 "test/../src/types_del.c"
                      ) {
        list_node next_node = node->next;
        node->type_del(node->val);
        free(node);
        node = next_node;
    }
    free(l);
}

void __cmodules_fifo_del(fifo q) {
    fifo_node node = q->head;

    while (node != 
# 45 "test/../src/types_del.c" 3 4
                  ((void *)0)
# 45 "test/../src/types_del.c"
                      ) {
        fifo_node next_node = node->next;
        node->type_del(node->val);
        free(node);
        node = next_node;
    }
    free(q);
}

void __cmodules_dict_del(dict d) {
    for (size_t i = 0; i < d->len; i++) {
        dict_node node = __cmodules_dict_get_node(d, d->keys[i]);
        if (node->has_collision) {
            dict_node base_node = node;
            node = node->next_for_key;
            while (node->has_collision) {
                d->key_type_del(node->key);
                d->val_type_del(node->val);
                dict_node next_node = node->next_for_key;
                free(node);
                node = next_node;
            }
            node = base_node;
        }
        d->key_type_del(node->key);
        d->val_type_del(node->val);
        d->key_type_del(d->keys[i]);
        free(node);
    }

    free(d->key_type_id);
    free(d->val_type_id);
    free(d->keys);
    free(d->vals);
    free(d);
}

void __cmodules_set_del(set s) {
    list_node node = s->head;

    while (node != 
# 85 "test/../src/types_del.c" 3 4
                  ((void *)0)
# 85 "test/../src/types_del.c"
                      ) {
        list_node next_node = node->next;
        node->type_del(node->val);
        free(node);
        node = next_node;
    }
    free(s);
}

void __cmodules_list_node_del(list_node node) {
    free(node->type_id);
    node->type_del(node->val);
    free(node);
}

void __cmodules_fifo_node_del(fifo_node node) {
    free(node->type_id);
    node->type_del(node->val);
    free(node);
}
# 10 "test/../src/types.c" 2
# 1 "test/../src/types_copy.c" 1

string __cmodules_string_copy(string s) {
    string result = malloc(sizeof(__cmodules_string_struct));

    result->len = s->len;
    result->val = calloc(sizeof(uchar), ((((result->len)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length)));
    for (size_t i = 0; i < s->len; i++) {
        result->val[i] = s->val[i];
    }

    return result;
}

array __cmodules_array_copy(array a) {
    array result = malloc(sizeof(__cmodules_array_struct));

    result->len = a->len;
    result->type_id = calloc(sizeof(char), (strlen(a->type_id)));
    result->type_size = a->type_size;
    strcpy(result->type_id, a->type_id);

    result->type_copy = a->type_copy;
    result->type_del = a->type_del;

    result->val = calloc(sizeof(byte), ((((result->len * result->type_size)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length)));
    for (size_t i = 0; i < result->len; i += a->type_size) {
        memcpy(result->val + i, result->type_copy(a->val + i), a->type_size);
    }

    return result;
}

list __cmodules_list_copy(list l) {
    list result = __cmodules_list_new();

    result->len = l->len;

    if (result->len > 0) {
        list_node source_node = l->head;
        list_node dest_node;

        dest_node = malloc(sizeof(__cmodules_list_node_struct));
        result->head = dest_node;

        dest_node->type_copy = source_node->type_copy;
        dest_node->type_del = source_node->type_del;
        dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
        dest_node->type_size = source_node->type_size;
        strcpy(dest_node->type_id, source_node->type_id);
        dest_node->val = dest_node->type_copy(source_node->val);

        for (size_t i = 1; i < result->len; i++) {
            dest_node->next = malloc(sizeof(__cmodules_list_node_struct));
            dest_node = dest_node->next;
            source_node = source_node->next;

            dest_node->type_copy = source_node->type_copy;
            dest_node->type_del = source_node->type_del;
            dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
            dest_node->type_size = source_node->type_size;
            strcpy(dest_node->type_id, source_node->type_id);
            dest_node->val = dest_node->type_copy(source_node->val);
        }

        dest_node->next = 
# 65 "test/../src/types_copy.c" 3 4
                         ((void *)0)
# 65 "test/../src/types_copy.c"
                             ;
    }
    else {
        result->head = 
# 68 "test/../src/types_copy.c" 3 4
                      ((void *)0)
# 68 "test/../src/types_copy.c"
                          ;
    }

    return result;
}

fifo __cmodules_fifo_copy(fifo q) {
    fifo result = __cmodules_fifo_new();

    result->len = q->len;

    if (result->len > 0) {
        fifo_node source_node = q->head;
        fifo_node dest_node;
        fifo_node prev_node;

        dest_node = malloc(sizeof(__cmodules_list_node_struct));
        result->head = dest_node;

        dest_node->prev = 
# 87 "test/../src/types_copy.c" 3 4
                              ((void *)0)
# 87 "test/../src/types_copy.c"
                                  ;
        dest_node->type_copy = source_node->type_copy;
        dest_node->type_del = source_node->type_del;
        dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
        dest_node->type_size = source_node->type_size;
        strcpy(dest_node->type_id, source_node->type_id);
        dest_node->val = dest_node->type_copy(source_node->val);

        for (size_t i = 1; i < result->len; i++) {
            dest_node->next = malloc(sizeof(__cmodules_list_node_struct));
            prev_node = dest_node;
            dest_node = dest_node->next;
            source_node = source_node->next;

            dest_node->prev = prev_node;
            dest_node->type_copy = source_node->type_copy;
            dest_node->type_del = source_node->type_del;
            dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
            dest_node->type_size = source_node->type_size;
            strcpy(dest_node->type_id, source_node->type_id);
            dest_node->val = dest_node->type_copy(source_node->val);
        }
        dest_node->next = 
# 109 "test/../src/types_copy.c" 3 4
                         ((void *)0)
# 109 "test/../src/types_copy.c"
                             ;
        result->tail = dest_node;
    }
    else {
        result->head = 
# 113 "test/../src/types_copy.c" 3 4
                      ((void *)0)
# 113 "test/../src/types_copy.c"
                          ;
        result->tail = 
# 114 "test/../src/types_copy.c" 3 4
                      ((void *)0)
# 114 "test/../src/types_copy.c"
                          ;
    }

    return result;
}

stack __cmodules_stack_copy(stack s) {
    stack result = __cmodules_stack_new();

    result->len = s->len;

    if (result->len > 0) {
        list_node source_node = s->head;
        list_node dest_node;

        dest_node = malloc(sizeof(__cmodules_list_node_struct));
        result->head = dest_node;

        dest_node->type_copy = source_node->type_copy;
        dest_node->type_del = source_node->type_del;
        dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
        dest_node->type_size = source_node->type_size;
        strcpy(dest_node->type_id, source_node->type_id);
        dest_node->val = dest_node->type_copy(source_node->val);

        for (size_t i = 1; i < result->len; i++) {
            dest_node->next = malloc(sizeof(__cmodules_list_node_struct));
            dest_node = dest_node->next;
            source_node = source_node->next;

            dest_node->type_copy = source_node->type_copy;
            dest_node->type_del = source_node->type_del;
            dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
            dest_node->type_size = source_node->type_size;
            strcpy(dest_node->type_id, source_node->type_id);
            dest_node->val = dest_node->type_copy(source_node->val);
        }

        dest_node->next = 
# 152 "test/../src/types_copy.c" 3 4
                         ((void *)0)
# 152 "test/../src/types_copy.c"
                             ;
    }
    else {
        result->head = 
# 155 "test/../src/types_copy.c" 3 4
                      ((void *)0)
# 155 "test/../src/types_copy.c"
                          ;
    }

    return result;
}

dict __cmodules_dict_copy(dict d) {
    dict result = malloc(sizeof(__cmodules_dict_struct));

    result->vals = calloc(sizeof(dict_node), (d->len));
    result->keys = calloc(sizeof(void*), (d->len));
    result->len = d->len;
    result->bucket_size = d->bucket_size;

    result->key_type_id = calloc(sizeof(char), ((strlen(d->key_type_id))+1));
    result->val_type_id = calloc(sizeof(char), ((strlen(d->val_type_id))+1));
    result->key_type_size = d->key_type_size;
    result->val_type_size = d->val_type_size;

    result->key_type_copy = d->key_type_copy;
    result->key_type_del = d->key_type_del;
    result->val_type_copy = d->val_type_copy;
    result->val_type_del = d->val_type_del;
    result->hash_key = d->hash_key;

    strcpy(result->key_type_id, d->key_type_id);
    strcpy(result->val_type_id, d->val_type_id);

    for (size_t i = 0; i < result->len; i++) {
        result->keys[i] = result->key_type_copy(d->keys[i]);
        dict_node dest_node = result->vals[i];
        dict_node source_node = d->vals[i];

        dest_node->val = result->val_type_copy(source_node->val);
        dest_node->key = result->key_type_copy(source_node->key);

        dest_node->has_collision = source_node->has_collision;
        while (dest_node->has_collision) {
            source_node = source_node->next_for_key;

            dest_node->next_for_key = malloc(sizeof(__cmodules_dict_node_struct));
            dest_node = dest_node->next_for_key;

            dest_node->val = result->val_type_copy(source_node->val);
            dest_node->key = result->key_type_copy(source_node->key);

            dest_node->has_collision = source_node->has_collision;
        }
        dest_node->next_for_key = 
# 203 "test/../src/types_copy.c" 3 4
                                 ((void *)0)
# 203 "test/../src/types_copy.c"
                                     ;
    }

    return result;
}

set __cmodules_set_copy(set s) {
    set result = __cmodules_set_new();

    result->len = s->len;

    if (result->len > 0) {
        list_node source_node = s->head;
        list_node dest_node;

        dest_node = malloc(sizeof(__cmodules_list_node_struct));
        result->head = dest_node;

        dest_node->type_copy = source_node->type_copy;
        dest_node->type_del = source_node->type_del;
        dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
        dest_node->type_size = source_node->type_size;
        strcpy(dest_node->type_id, source_node->type_id);
        dest_node->val = dest_node->type_copy(source_node->val);

        for (size_t i = 1; i < result->len; i++) {
            dest_node->next = malloc(sizeof(__cmodules_list_node_struct));
            dest_node = dest_node->next;
            source_node = source_node->next;

            dest_node->type_copy = source_node->type_copy;
            dest_node->type_del = source_node->type_del;
            dest_node->type_id = calloc(sizeof(char), ((strlen(source_node->type_id))+1));
            dest_node->type_size = source_node->type_size;
            strcpy(dest_node->type_id, source_node->type_id);
            dest_node->val = dest_node->type_copy(source_node->val);
        }

        dest_node->next = 
# 241 "test/../src/types_copy.c" 3 4
                         ((void *)0)
# 241 "test/../src/types_copy.c"
                             ;
    }
    else {
        result->head = 
# 244 "test/../src/types_copy.c" 3 4
                      ((void *)0)
# 244 "test/../src/types_copy.c"
                          ;
    }

    return result;
}

list_node __cmodules_list_node_copy(list_node node) {
    list_node result = malloc(sizeof(__cmodules_list_node_struct));

    result->type_id = calloc(sizeof(char), (strlen(node->type_id)));
    strcpy(result->type_id, node->type_id);
    result->type_size = node->type_size;
    result->type_del = node->type_del;
    result->type_copy = node->type_copy;
    result->type_cmp = node->type_cmp;
    result->val = node->type_copy(node->val);
    result->next = 
# 260 "test/../src/types_copy.c" 3 4
                  ((void *)0)
# 260 "test/../src/types_copy.c"
                      ;

    return result;
}

fifo_node __cmodules_fifo_node_copy(fifo_node node) {
    fifo_node result = malloc(sizeof(__cmodules_fifo_node_struct));

    result->type_id = calloc(sizeof(char), (strlen(node->type_id)));
    strcpy(result->type_id, node->type_id);
    result->type_size = node->type_size;
    result->type_del = node->type_del;
    result->type_copy = node->type_copy;
    result->type_cmp = node->type_cmp;
    result->val = node->type_copy(node->val);
    result->next = 
# 275 "test/../src/types_copy.c" 3 4
                  ((void *)0)
# 275 "test/../src/types_copy.c"
                      ;
    result->prev = 
# 276 "test/../src/types_copy.c" 3 4
                  ((void *)0)
# 276 "test/../src/types_copy.c"
                      ;

    return result;
}
# 11 "test/../src/types.c" 2
# 1 "test/../src/types_add.c" 1
string __cmodules_string_add (string s, raw_string arg) {
    size_t arg_len = strlen(arg);
    if (arg_len == 0)
        return s;

    if (s->len + arg_len > s->mem) {
        s->mem = ((((s->len + arg_len) * sizeof(uchar))/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length);
        realloc(s->val, s->mem);
    }

    for (size_t i = 0; i < arg_len;) {
        uchar cur = utf8_to_code_point(arg + i);
        size_t cln = code_point_size(cur);
        s->val[s->len] = cur;
        s->len += 1;
        i += cln;
    }

    return s;
}

array __cmodules_array_add(array a, size_t arg_size, raw_pointer* arg) {
    if ((a->len + 1) * a->type_size > a->mem) {
        a->mem = ((((a->len + 1) * a->type_size)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length);
        realloc(a->val, a->mem);
    }

    size_t cur = a->len;
    for (size_t i = 0; i < arg_size; i++) {
        memcpy(a->val + cur, a->type_copy(arg[i]), a->type_size);
        cur += a->type_size;
        a->len += 1;
    }

    return a;
}

list __cmodules_list_add(list l, raw_string type, size_t type_size, raw_pointer arg) {
    list_node node;

    if (l->len == 0) {
        l->head = malloc(sizeof(__cmodules_list_node_struct));
        node = l->head;
    }
    else {
        node = l->head;
        while (node->next != 
# 47 "test/../src/types_add.c" 3 4
                            ((void *)0)
# 47 "test/../src/types_add.c"
                                ) {
            node = node->next;
        }
        node->next = malloc(sizeof(__cmodules_list_node_struct));
        node = node->next;
    }

    node->type_id = calloc(sizeof(char), (strlen(type)+1));
    strcpy(node->type_id, type);
    node->type_size = type_size;
    node->type_copy = __cmodules_get_copy_function(type);
    node->type_del = __cmodules_get_del_function(type);
    node->type_cmp = __cmodules_get_cmp_function(type);
    node->val = node->type_copy(arg);
    node->next = 
# 61 "test/../src/types_add.c" 3 4
                ((void *)0)
# 61 "test/../src/types_add.c"
                    ;

    l->len += 1;
    return l;
}

fifo __cmodules_fifo_add(fifo q, raw_string type, size_t type_size, raw_pointer arg) {
    fifo_node node;

    if (q->len == 0) {
        node = malloc(sizeof(__cmodules_list_node_struct));
        node->next = 
# 72 "test/../src/types_add.c" 3 4
                    ((void *)0)
# 72 "test/../src/types_add.c"
                        ;
        q->tail = node;
    }
    else {
        node = malloc(sizeof(__cmodules_list_node_struct));
        node->next = q->head;
        q->head->prev = node;
    }

    node->type_id = calloc(sizeof(char), (strlen(type)+1));
    strcpy(node->type_id, type);
    node->type_size = type_size;
    node->type_copy = __cmodules_get_copy_function(type);
    node->type_del = __cmodules_get_del_function(type);
    node->type_cmp = __cmodules_get_cmp_function(type);
    node->val = node->type_copy(arg);
    node->prev = 
# 88 "test/../src/types_add.c" 3 4
                ((void *)0)
# 88 "test/../src/types_add.c"
                    ;

    q->head = node;
    q->len += 1;
    return q;
}

stack __cmodules_stack_add(stack l, raw_string type, size_t type_size, raw_pointer arg) {
    list_node node;
    list_node next_node;

    if (l->len == 0) {
        l->head = malloc(sizeof(__cmodules_list_node_struct));
        node = l->head;
        next_node = 
# 102 "test/../src/types_add.c" 3 4
                   ((void *)0)
# 102 "test/../src/types_add.c"
                       ;
    }
    else {
        node = malloc(sizeof(__cmodules_list_node_struct));
        next_node = l->head;
    }

    node->type_id = calloc(sizeof(char), (strlen(type)+1));
    strcpy(node->type_id, type);
    node->type_size = type_size;
    node->type_copy = __cmodules_get_copy_function(type);
    node->type_del = __cmodules_get_del_function(type);
    node->type_cmp = __cmodules_get_cmp_function(type);
    node->val = node->type_copy(arg);
    node->next = next_node;

    l->head = node;
    l->len += 1;
    return l;
}

dict __cmodules_dict_add(dict d, raw_pointer key, raw_pointer val) {
    dict_node node;

    if (__cmodules_dict_has_key(d, key)) {
        __cmodules_dict_setval(d, key, val);
        return d;
    }
    else {
        d->keys[d->len] = d->key_type_copy(key);
        size_t hsh = d->hash_key(key, d->bucket_size);
        if (d->vals[hsh] != 
# 133 "test/../src/types_add.c" 3 4
                           ((void *)0)
# 133 "test/../src/types_add.c"
                               ) {
            node = d->vals[hsh];
            while (node->has_collision) {
                node = node->next_for_key;
            }
            node->has_collision = ((_Bool) !0);
            node->next_for_key = malloc(sizeof(__cmodules_dict_node_struct));
            node = node->next_for_key;
        }
        else {
            d->vals[hsh] = malloc(sizeof(__cmodules_dict_node_struct));
            node = d->vals[hsh];
        }
    }

    node->val = d->val_type_copy(val);
    node->key = d->key_type_copy(key);
    node->has_collision = ((_Bool) 0);
    node->next_for_key = 
# 151 "test/../src/types_add.c" 3 4
                        ((void *)0)
# 151 "test/../src/types_add.c"
                            ;

    d->len += 1;
    return d;
}

set __cmodules_set_add(set l, raw_string type, size_t type_size, raw_pointer arg) {
    if (__cmodules_set_contains(l, type, type_size, arg))
        return l;

    return (set) __cmodules_list_add((list) l, type, type_size, arg);
}
# 12 "test/../src/types.c" 2
# 1 "test/../src/types_rem.c" 1
void __cmodules_string_rem(string s, size_t pos) {
    if (pos > s->len-1)
        pos = s->len-1;

    if (pos == s->mem-1) {
        s->val[pos] = 0;
        s->len -= 1;
        return;
    }

    memcpy(s->val + pos, s->val + pos + 1, (s->len - pos) * sizeof(uchar));
    s->len -= 1;
}

void __cmodules_array_rem(array a, size_t pos) {
    if (pos > a->len-1)
        pos = a->len-1;

    pos *= a->type_size;
    a->type_del(a->val + pos);
    memcpy(a->val + pos, a->val + pos + 1, (a->len - pos));

    a->len -= 1;
}

void __cmodules_list_rem(list l, size_t pos) {
    if (pos > l->len-1)
        pos = l->len-1;

    list_node node;
    list_node prev_node;
    if (pos == 0) {
        node = l->head;
        l->head = node->next;
    }
    else {
        node = l->head->next;
        prev_node = l->head;
        for (size_t i = 1; i < pos; i++) {
            prev_node = node;
            node = node->next;
        }
        prev_node->next = node->next;
    }

    node->type_del(node->val);
    free(node);
    l->len -= 1;
}

void __cmodules_dict_rem(dict d, void* key) {
    size_t hsh = d->hash_key(key, d->bucket_size);
    dict_node node = d->vals[hsh];

    if (d->key_type_cmp(node->key, key).eq) {
        d->key_type_del(node->key);
        d->val_type_del(node->val);
        if (node->has_collision) {
            d->vals[hsh] = node->next_for_key;
        }
        else {
            d->vals[hsh] = 
# 62 "test/../src/types_rem.c" 3 4
                          ((void *)0)
# 62 "test/../src/types_rem.c"
                              ;
        }
        free(node);
        d->len -= 1;
    }
    else {
        dict_node prev_node = 
# 68 "test/../src/types_rem.c" 3 4
                             ((void *)0)
# 68 "test/../src/types_rem.c"
                                 ;
        dict_node curr_node = d->vals[hsh];
        while (d->key_type_cmp(node->key, key).ne && node->has_collision) {
            prev_node = curr_node;
            curr_node = curr_node->next_for_key;
        }
        if (d->key_type_cmp(node->key, key).eq) {
            d->val_type_del(curr_node->val);
            d->key_type_del(curr_node->key);
            prev_node->next_for_key = curr_node->next_for_key;
            free(curr_node);
        }
    }
}

void __cmodules_set_rem(set l, size_t pos) {
    if (pos > l->len-1)
        pos = l->len-1;

    list_node node;
    list_node prev_node;
    if (pos == 0) {
        node = l->head;
        l->head = node->next;
    }
    else {
        node = l->head->next;
        prev_node = l->head;
        for (size_t i = 1; i < pos; i++) {
            prev_node = node;
            node = node->next;
        }
        prev_node->next = node->next;
    }

    node->type_del(node->val);
    free(node);
    l->len -= 1;
}
# 13 "test/../src/types.c" 2
# 1 "test/../src/types_clear.c" 1
void __cmodules_string_clear(string s) {
    memset(s->val, 0, s->mem);
    s->len = 0;
}

void __cmodules_array_clear(array a) {
    memset(a->val, 0, a->mem);
    a->len = 0;
}

void __cmodules_list_clear(list l) {
    list_node node = l->head;
    list_node prev_node;

    while (node != 
# 15 "test/../src/types_clear.c" 3 4
                  ((void *)0)
# 15 "test/../src/types_clear.c"
                      ) {
        node->type_del(node->val);
        prev_node = node;
        node = node->next;
        free(prev_node);
    }

    l->head = 
# 22 "test/../src/types_clear.c" 3 4
             ((void *)0)
# 22 "test/../src/types_clear.c"
                 ;
    l->len = 0;
}

void __cmodules_fifo_clear(fifo q) {
    fifo_node node = q->head;
    fifo_node prev_node;

    while (node != 
# 30 "test/../src/types_clear.c" 3 4
                  ((void *)0)
# 30 "test/../src/types_clear.c"
                      ) {
        node->type_del(node->val);
        prev_node = node;
        node = node->next;
        free(prev_node);
    }

    q->head = 
# 37 "test/../src/types_clear.c" 3 4
             ((void *)0)
# 37 "test/../src/types_clear.c"
                 ;
    q->tail = 
# 38 "test/../src/types_clear.c" 3 4
             ((void *)0)
# 38 "test/../src/types_clear.c"
                 ;
    q->len = 0;
}

void __cmodules_stack_clear(stack l) {
    list_node node = l->head;
    list_node prev_node;

    while (node != 
# 46 "test/../src/types_clear.c" 3 4
                  ((void *)0)
# 46 "test/../src/types_clear.c"
                      ) {
        node->type_del(node->val);
        prev_node = node;
        node = node->next;
        free(prev_node);
    }

    l->head = 
# 53 "test/../src/types_clear.c" 3 4
             ((void *)0)
# 53 "test/../src/types_clear.c"
                 ;
    l->len = 0;
}

void __cmodules_dict_clear(dict d) {
    for (size_t i = 0; i < d->len; i++) {
        d->key_type_del(d->keys[i]);
        d->keys[i] = 
# 60 "test/../src/types_clear.c" 3 4
                    ((void *)0)
# 60 "test/../src/types_clear.c"
                        ;
    }
    for (size_t i = 0; i < d->bucket_size; i++) {
        dict_node node = d->vals[i];
        if (node == 
# 64 "test/../src/types_clear.c" 3 4
                   ((void *)0)
# 64 "test/../src/types_clear.c"
                       )
            continue;
        d->key_type_del(node->key);
        d->val_type_del(node->val);
        if (node->has_collision) {
            dict_node base_node = node;
            while (node->has_collision) {
                node = node->next_for_key;
                d->key_type_del(node->key);
                d->val_type_del(node->val);
            }
            node = base_node;
        }
        free(node);
    }
    d->len = 0;
}

void __cmodules_set_clear(set l) {
    list_node node = l->head;
    list_node prev_node;

    while (node != 
# 86 "test/../src/types_clear.c" 3 4
                  ((void *)0)
# 86 "test/../src/types_clear.c"
                      ) {
        node->type_del(node->val);
        prev_node = node;
        node = node->next;
        free(prev_node);
    }

    l->head = 
# 93 "test/../src/types_clear.c" 3 4
             ((void *)0)
# 93 "test/../src/types_clear.c"
                 ;
    l->len = 0;
}
# 14 "test/../src/types.c" 2
# 1 "test/../src/types_contains.c" 1
bool __cmodules_string_contains(string s, string e) {
    if (s->len < e->len)
        return ((_Bool) 0);

    size_t max_index = s->len - e->len;

    for (size_t i = 0; i <= max_index; i++) {
        if (memcmp(s->val + i, e->val, e->len * sizeof(uchar)) == 0)
            return ((_Bool) !0);
    }

    return ((_Bool) 0);
}

bool __cmodules_array_contains(array a, raw_pointer e) {
    if (a->len == 0)
        return ((_Bool) 0);

    for (size_t i = 0; i < a->len; i += a->type_size) {
        if (a->type_cmp(a->val + i, e).eq)
            return ((_Bool) !0);
    }

    return ((_Bool) 0);
}

bool __cmodules_list_contains(list l, raw_string type, size_t type_size, raw_pointer e) {
    if (l->len == 0)
        return ((_Bool) 0);

    list_node node = l->head;
    while (node != 
# 32 "test/../src/types_contains.c" 3 4
                  ((void *)0)
# 32 "test/../src/types_contains.c"
                      ) {
        if (strcmp(node->type_id, type) == 0) {
            if (node->type_cmp(node->val, e).eq)
                return ((_Bool) !0);
        }
        node = node->next;
    }

    return ((_Bool) 0);
}

bool __cmodules_fifo_contains(fifo q, raw_string type, size_t type_size, raw_pointer e) {
    if (q->len == 0)
        return ((_Bool) 0);

    fifo_node node = q->head;
    while (node != 
# 48 "test/../src/types_contains.c" 3 4
                  ((void *)0)
# 48 "test/../src/types_contains.c"
                      ) {
        if (strcmp(node->type_id, type) == 0) {
            if (node->type_cmp(node->val, e).eq)
                return ((_Bool) !0);
        }
        node = node->next;
    }

    return ((_Bool) 0);
}

bool __cmodules_stack_contains(stack s, raw_string type, size_t type_size, raw_pointer e) {
    if (s->len == 0)
        return ((_Bool) 0);

    list_node node = s->head;
    while (node != 
# 64 "test/../src/types_contains.c" 3 4
                  ((void *)0)
# 64 "test/../src/types_contains.c"
                      ) {
        if (strcmp(node->type_id, type) == 0) {
            if (node->type_cmp(node->val, e).eq)
                return ((_Bool) !0);
        }
        node = node->next;
    }

    return ((_Bool) 0);
}

bool __cmodules_dict_contains(dict d, raw_pointer e) {
    if (d->len == 0)
        return ((_Bool) 0);

    for (size_t i = 0; i < d->len; i++) {
        size_t hsh = d->hash_key(d->keys[i], d->bucket_size);
        dict_node node = d->vals[hsh];
        if (d->val_type_cmp(node->val, e).eq)
            return ((_Bool) !0);
        while (node->has_collision) {
            node = node->next_for_key;
            if (d->val_type_cmp(node->val, e).eq)
                return ((_Bool) !0);
        }
    }

    return ((_Bool) 0);
}

bool __cmodules_set_contains(set s, raw_string type, size_t type_size, raw_pointer e) {
    if (s->len == 0)
        return ((_Bool) 0);

    list_node node = s->head;
    while (node != 
# 99 "test/../src/types_contains.c" 3 4
                  ((void *)0)
# 99 "test/../src/types_contains.c"
                      ) {
        if (strcmp(node->type_id, type) == 0) {
            if (node->type_cmp(node->val, e).eq)
                return ((_Bool) !0);
        }
        node = node->next;
    }

    return ((_Bool) 0);
}
# 15 "test/../src/types.c" 2
# 1 "test/../src/types_index.c" 1
size_t __cmodules_string_index(string s, string e) {
    if (!(s->len > e->len))
        return -1;

    for (size_t i = 0; i < s->len - e->len; i++) {
        if (memcmp(s->val + i, e->val, e->len * sizeof(uchar)) == 0)
            return i;
    }

    return -1;
}

size_t __cmodules_array_index(array a, void* e) {
    if (a->len == 0)
        return -1;

    for (size_t i = 0; i < a->len; i += a->type_size) {
        if (a->type_cmp(a->val + i, e).eq)
            return i / a->type_size;
    }

    return -1;
}

size_t __cmodules_list_index(list l, raw_string type, size_t type_size, void* e) {
    if (l->len == 0)
        return -1;

    size_t cur = 0;
    list_node node = l->head;
    while (node != 
# 31 "test/../src/types_index.c" 3 4
                  ((void *)0)
# 31 "test/../src/types_index.c"
                      ) {
        if (strcmp(node->type_id, type) == 0) {
            if (node->type_cmp(node->val, e).eq)
                return cur;
        }
        node = node->next;
        cur += 1;
    }

    return -1;
}

size_t __cmodules_set_index(set l, raw_string type, size_t type_size, void* e) {
    if (l->len == 0)
        return -1;

    size_t cur = 0;
    list_node node = l->head;
    while (node != 
# 49 "test/../src/types_index.c" 3 4
                  ((void *)0)
# 49 "test/../src/types_index.c"
                      ) {
        if (strcmp(node->type_id, type) == 0) {
            if (node->type_cmp(node->val, e).eq)
                return cur;
        }
        node = node->next;
        cur += 1;
    }

    return -1;
}
# 16 "test/../src/types.c" 2
# 1 "test/../src/types_join.c" 1
string __cmodules_string_join(string s1, string s2) {
    if (s1->len + s2->len > s1->mem - 1) {
        s1->mem = (((s1->len + s2->len + 1)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length);
        realloc(s1->val, s1->mem);
    }

    size_t cur = s1->len;
    for (size_t i = 0; i < s2->len; i++) {
        s1->val[cur + i] = s2->val[i];
    }

    s1->len += s2->len;

    return s1;
}

array __cmodules_array_join(array a1, array a2) {
    if (strcmp(a1->type_id, a2->type_id) != 0) {
        return a1;
    }

    if ((a1->len + a2->len) * a1->type_size > a1->mem) {
        a1->mem = ((((a1->len + a2->len) * a1->type_size)/__cmodules_config_default_container_length + 1) * __cmodules_config_default_container_length);
        realloc(a1->val, a1->mem);
    }

    size_t cur = a1->len * a1->type_size;
    for (size_t i = 0; i < a2->len; i++) {
        a1->val[cur + i*a1->type_size] = a2->val[i*a2->type_size];
    }

    a1->len += a2->len;

    return a1;
}

list __cmodules_list_join(list l1, list l2) {
    if (l2->len == 0)
        return l1;

    list_node dest_node;
    list_node source_node;
    if (l1->len == 0) {
        l1->head = __cmodules_list_node_copy(l2->head);
        dest_node = l1->head;
        source_node = l2->head->next;
    }
    else {
        dest_node = l1->head;
        while (dest_node->next != 
# 50 "test/../src/types_join.c" 3 4
                                 ((void *)0)
# 50 "test/../src/types_join.c"
                                     ) {
            dest_node = dest_node->next;
        }
        source_node = l2->head;
    }

    while (source_node != 
# 56 "test/../src/types_join.c" 3 4
                         ((void *)0)
# 56 "test/../src/types_join.c"
                             ) {
        dest_node->next = __cmodules_list_node_copy(source_node);
        dest_node = dest_node->next;
        source_node = source_node->next;
    }

    l1->len += l2->len;

    return l1;
}

dict __cmodules_dict_join(dict d1, dict d2) {
    if (strcmp(d1->key_type_id, d2->key_type_id) != 0 ||
        strcmp(d1->val_type_id, d2->val_type_id) != 0)
        return d1;

    for (size_t i = 0; i < d2->len; i++) {
        dict_node node = d2->vals[i];
        __cmodules_dict_add(d1, node->key, node->val);
    }

    return d1;
}

set __cmodules_set_join(set s1, set s2) {
    if (s2->len == 0)
        return s1;

    if (s1->len == 0) {
        __cmodules_list_join((list) s1, (list) s2);
        return s1;
    }

    list_node dest_node = s1->head;
    while (dest_node->next != 
# 90 "test/../src/types_join.c" 3 4
                             ((void *)0)
# 90 "test/../src/types_join.c"
                                 ) {
        dest_node = dest_node->next;
    }
    list_node source_node = s2->head;

    while (source_node != 
# 95 "test/../src/types_join.c" 3 4
                         ((void *)0)
# 95 "test/../src/types_join.c"
                             ) {
        if (__cmodules_set_has_node(s1, source_node) == ((_Bool) 0)) {
            dest_node->next = __cmodules_list_node_copy(source_node);
            dest_node = dest_node->next;
            source_node = source_node->next;
            s1->len += 1;
        }
    }

    return s1;
}
# 17 "test/../src/types.c" 2
# 1 "test/../src/types_slice.c" 1
string __cmodules_string_slice(string s, size_t p1, size_t p2) {
    string result = __cmodules_string_new(1 + ((int)(sizeof((void*[]){})/sizeof(void*))));

    if (s->len == 0)
        return result;

    if (p1 > s->len-1)
        p1 = s->len-1;

    if (p2 > s->len-1)
        p2 = s->len-1;

    bool reversed = ((_Bool) 0);
    if (p1 > p2) {
        size_t tmp = p1;
        p1 = p2;
        p2 = tmp;
        reversed = ((_Bool) !0);
    }
    result->len = p2 - p1 + 1;

    if (!reversed) {
        size_t cur = 0;
        for (size_t i = p1; i <= p2; i++) {
            result->val[cur] = s->val[i];
            cur += 1;
        }
    }
    else {
        size_t cur = 0;
        for (size_t i = p2; i >= p1 && i < i + 1; i--) {
            result->val[cur] = s->val[i];
            cur += 1;
        }
    }

    return result;
}

array __cmodules_array_slice (array a, size_t p1, size_t p2) {
    array result = __cmodules_array_new(a->type_id, a->type_size, 0, 0, 
# 41 "test/../src/types_slice.c" 3 4
                                                                       ((void *)0)
# 41 "test/../src/types_slice.c"
                                                                           );

    if (a->len == 0)
        return result;

    if (p1 > a->len)
        p1 = a->len-1;

    if (p2 > a->len)
        p2 = a->len-1;

    bool reversed = ((_Bool) 0);
    if (p1 > p2) {
        size_t tmp = p1;
        p1 = p2;
        p2 = tmp;
        reversed = ((_Bool) !0);
    }
    result->len = p2 - p1 + 1;

    if (!reversed) {
        size_t cur = 0;
        for (size_t i = p1 * a->type_size; i <= p2 * a->type_size; i += a->type_size) {
            memcpy(result->val + cur, a->type_copy(a->val + i), a->type_size);
            cur += a->type_size;
        }
    }
    else {
        size_t cur = 0;
        for (size_t i = p2 * a->type_size; i >= p1 * a->type_size && (i - 1) < i; i -= a->type_size) {
            memcpy(result->val + cur, a->type_copy(a->val + i), a->type_size);
            cur += a->type_size;
        }
    }

    return result;
}

list __cmodules_list_slice(list l, size_t p1, size_t p2) {
    list result = __cmodules_list_new();

    if (l->len == 0)
        return result;

    if (p1 > l->len)
        p1 = l->len-1;

    if (p2 > l->len)
        p2 = l->len-1;

    bool reversed = ((_Bool) 0);
    if (p1 > p2) {
        size_t tmp = p1;
        p1 = p2;
        p2 = tmp;
        reversed = ((_Bool) !0);
    }
    result->len = p2 - p1 + 1;

    size_t cur = 0;
    list_node source_node = l->head;

    while (cur < p1) {
        source_node = source_node->next;
        cur += 1;
    }

    result->head = __cmodules_list_node_copy(source_node);
    cur += 1;
    list_node dest_node = result->head;
    while (cur <= p2) {
        source_node = source_node->next;
        dest_node->next = __cmodules_list_node_copy(source_node);
        dest_node = dest_node->next;
        cur += 1;
    }

    if (reversed) {
        list_node nodes[result->len];
        list_node node = result->head;

        cur = 0;
        while (node != 
# 123 "test/../src/types_slice.c" 3 4
                      ((void *)0)
# 123 "test/../src/types_slice.c"
                          ) {
            nodes[cur] = node;
            node = node->next;
        }

        node = l->head->next;
        l->head = nodes[result->len-1];
        for (size_t i = result->len-2; i > 0 && (i-1) < i; i--) {
            node->next = nodes[i];
            node = node->next;
        }
    }

    return result;
}

set __cmodules_set_slice(set l, size_t p1, size_t p2) {
    set result = __cmodules_set_new();

    if (l->len == 0)
        return result;

    if (p1 > l->len)
        p1 = l->len-1;

    if (p2 > l->len)
        p2 = l->len-1;

    bool reversed = ((_Bool) 0);
    if (p1 > p2) {
        size_t tmp = p1;
        p1 = p2;
        p2 = tmp;
        reversed = ((_Bool) !0);
    }
    result->len = p2 - p1 + 1;

    size_t cur = 0;
    list_node source_node = l->head;

    while (cur < p1) {
        source_node = source_node->next;
        cur += 1;
    }

    result->head = __cmodules_list_node_copy(source_node);
    cur += 1;
    list_node dest_node = result->head;
    while (cur <= p2) {
        source_node = source_node->next;
        dest_node->next = __cmodules_list_node_copy(source_node);
        dest_node = dest_node->next;
        cur += 1;
    }

    if (reversed) {
        list_node nodes[result->len];
        list_node node = result->head;

        cur = 0;
        while (node != 
# 183 "test/../src/types_slice.c" 3 4
                      ((void *)0)
# 183 "test/../src/types_slice.c"
                          ) {
            nodes[cur] = node;
            node = node->next;
        }

        node = l->head->next;
        l->head = nodes[result->len-1];
        for (size_t i = result->len-2; i > 0 && (i-1) < i; i--) {
            node->next = nodes[i];
            node = node->next;
        }
    }

    return result;
}
# 18 "test/../src/types.c" 2
# 1 "test/../src/types_reverse.c" 1
string __cmodules_string_reverse(string s) {
    if (s->len == 0)
        return s;

    uchar* rev = calloc(sizeof(uchar), (s->len));

    for (size_t i = 0; i < s->len; i++) {
        rev[i] = s->val[i];
    }

    size_t cur = 0;
    for (size_t i = s->len-1; i + 1 > i; i--) {
        s->val[cur] = rev[i];
        cur += 1;
    }

    free(rev);
    return s;
}

array __cmodules_array_reverse(array a) {
    if (a->len == 0)
        return a;

    byte* rev = calloc(sizeof(byte), (a->type_size * a->len));

    for (size_t i = 0; i < a->len; i += a->type_size) {
        memcpy(rev + i, a->val + i, a->type_size);
    }

    size_t cur = 0;
    for (size_t i = a->len-1; i + 1 > i; i -= a->type_size) {
        memcpy(a->val + i, a->val + cur, a->type_size);
        cur += a->type_size;
    }

    free(rev);
    return a;
}

list __cmodules_list_reverse(list l) {
    if (l->len == 0)
        return l;

    list_node* nodes = calloc(sizeof(list_node), (l->len));

    list_node node = l->head;
    for (size_t i = 0; i < l->len; i++) {
        nodes[i] = node;
        node = node->next;
    }

    for (size_t i = l->len-1; i != 0; i--) {
        nodes[i]->next = nodes[i-1];
    }
    nodes[0]->next = 
# 56 "test/../src/types_reverse.c" 3 4
                    ((void *)0)
# 56 "test/../src/types_reverse.c"
                        ;
    l->head = nodes[l->len-1];

    free(nodes);
    return l;
}

stack __cmodules_stack_reverse(stack l) {
    if (l->len == 0)
        return l;

    list_node* nodes = calloc(sizeof(list_node), (l->len));

    list_node node = l->head;
    for (size_t i = 0; i < l->len; i++) {
        nodes[i] = node;
        node = node->next;
    }

    for (size_t i = l->len-1; i != 0; i--) {
        nodes[i]->next = nodes[i-1];
    }
    nodes[0]->next = 
# 78 "test/../src/types_reverse.c" 3 4
                    ((void *)0)
# 78 "test/../src/types_reverse.c"
                        ;
    l->head = nodes[l->len-1];

    free(nodes);
    return l;
}

fifo __cmodules_fifo_reverse(fifo q) {
    if (q->len == 0)
        return q;

    fifo_node* nodes = calloc(sizeof(list_node), (q->len));

    fifo_node node = q->head;
    for (size_t i = 0; i < q->len; i++) {
        nodes[i] = node;
        node = node->next;
    }

    nodes[q->len-1]->prev = 
# 97 "test/../src/types_reverse.c" 3 4
                           ((void *)0)
# 97 "test/../src/types_reverse.c"
                               ;
    for (size_t i = q->len-1; i != 0; i--) {
        nodes[i]->next = nodes[i-1];
        nodes[i-1]->prev = nodes[i];
    }
    nodes[0]->next = 
# 102 "test/../src/types_reverse.c" 3 4
                    ((void *)0)
# 102 "test/../src/types_reverse.c"
                        ;
    q->head = nodes[q->len-1];
    q->tail = nodes[0];

    free(nodes);
    return q;
}

set __cmodules_set_reverse(set l) {
    if (l->len == 0)
        return l;

    list_node* nodes = calloc(sizeof(list_node), (l->len));

    list_node node = l->head;
    for (size_t i = 0; i < l->len; i++) {
        nodes[i] = node;
        node = node->next;
    }

    for (size_t i = l->len-1; i != 0; i--) {
        nodes[i]->next = nodes[i-1];
    }
    nodes[0]->next = 
# 125 "test/../src/types_reverse.c" 3 4
                    ((void *)0)
# 125 "test/../src/types_reverse.c"
                        ;
    l->head = nodes[l->len-1];

    free(nodes);
    return l;
}
# 19 "test/../src/types.c" 2
# 1 "test/../src/types_sort.c" 1

string __cmodules_string_insertion_sort(string s) {
    if (s->len < 2)
        return s;

    uchar* sorted = calloc(sizeof(uchar), (s->len));
    sorted[0] = s->val[0];
    for (size_t i = 1; i < s->len; i++) {
        sorted[i] = s->val[i];
        for (size_t j = i; j > 0 && sorted[j-1] > sorted[j]; j--) {
            uchar tmp = sorted[j];
            sorted[j] = sorted[j-1];
            sorted[j-1] = tmp;
        }
    }

    memcpy(s->val, sorted, s->len * sizeof(uchar));
    free(sorted);
    return s;
}

array __cmodules_array_insertion_sort(array a) {
    if (a->len < 2)
        return a;

    array tmp_array = __cmodules_array_copy(a);
    __cmodules_array_setval(tmp_array, 0, __cmodules_array_getval(a, 0));
    for (size_t i = 1; i < a->len; i++) {
        __cmodules_array_setval(tmp_array, i, __cmodules_array_getval(a, i));
        for (size_t j = i;
                    j > 0 &&
                    tmp_array->type_cmp(__cmodules_array_getval(tmp_array, j-1), __cmodules_array_getval(tmp_array, j)).gt;
                    j--) {
            raw_pointer tmp = __cmodules_array_getval(tmp_array, j);
            __cmodules_array_setval(a, j, __cmodules_array_getval(tmp_array, j-1));
            __cmodules_array_setval(a, j-1, tmp);
        }
    }

    free(a->val);
    a->val = tmp_array->val;
    __cmodules_array_del(tmp_array);
    return a;
}



uchar __cmodules_string_pivot(string s, size_t lo, size_t hi) {
    size_t mid = (lo + hi) / 2;
    if (s->val[mid] < s->val[lo]) {
        uchar tmp = s->val[mid];
        s->val[mid] = s->val[lo];
        s->val[lo] = tmp;
    }
    if (s->val[hi] < s->val[lo]) {
        uchar tmp = s->val[hi];
        s->val[hi] = s->val[lo];
        s->val[lo] = tmp;
    }
    if (s->val[mid] < s->val[hi]) {
        uchar tmp = s->val[mid];
        s->val[mid] = s->val[hi];
        s->val[hi] = tmp;
    }
    return s->val[hi];
}
void __cmodules_string_partition(string s, uchar p, size_t lo, size_t hi, size_t* left, size_t* right) {
    size_t i = lo - 1;
    size_t j = hi + 1;
    while (((_Bool) !0)) {
        do {
            i += 1;
        } while (s->val[i] < p);
        do {
            j -= 1;
        } while (s->val[j] > p);

        if (i >= j) {
            *left = i;
            *right = j;
            return;
        }

        uchar tmp = s->val[i];
        s->val[i] = s->val[j];
        s->val[j] = tmp;
    }
}
string __cmodules_string_quicksort(string s, size_t lo, size_t hi) {
    if (lo < hi) {
        uchar p = __cmodules_string_pivot(s, lo, hi);
        size_t left;
        size_t right;
        __cmodules_string_partition(s, p, lo, hi, &left, &right);
        __cmodules_string_quicksort(s, lo, left-1);
        __cmodules_string_quicksort(s, right+1, hi);
    }
    return s;
}


raw_pointer __cmodules_array_pivot(array a, size_t lo, size_t hi) {
    size_t mid = (lo + hi) / 2;
    raw_pointer lo_val = __cmodules_array_getval(a, lo);
    raw_pointer mid_val = __cmodules_array_getval(a, mid);
    raw_pointer hi_val = __cmodules_array_getval(a, hi);
    bool switch_happened = ((_Bool) 0);
    if (a->type_cmp(mid_val, lo_val).lt) {
        raw_pointer tmp = mid_val;
        mid_val = lo_val;
        lo_val = tmp;
        switch_happened = ((_Bool) !0);
    }
    if (a->type_cmp(hi_val, lo_val).lt) {
        raw_pointer tmp = hi_val;
        hi_val = lo_val;
        lo_val = tmp;
        switch_happened = ((_Bool) !0);
    }
    if (a->type_cmp(mid_val, hi_val).lt) {
        raw_pointer tmp = mid_val;
        mid_val = hi_val;
        hi_val = tmp;
        switch_happened = ((_Bool) !0);
    }
    if (switch_happened) {
        __cmodules_array_setval(a, lo, lo_val);
        __cmodules_array_setval(a, mid, mid_val);
        __cmodules_array_setval(a, hi, hi_val);
    }
    return hi_val;
}
void __cmodules_array_partition(array a, raw_pointer p, size_t lo, size_t hi, size_t* left, size_t* right) {
    size_t i = lo - 1;
    size_t j = hi + 1;
    raw_pointer i_val = __cmodules_array_getval(a, i);
    raw_pointer j_val = __cmodules_array_getval(a, j);
    while (((_Bool) !0)) {
        do {
            i += 1;
            i_val = __cmodules_array_getval(a, i);
        } while (a->type_cmp(i_val, p).lt);
        do {
            j -= 1;
            j_val = __cmodules_array_getval(a, j);
        } while (a->type_cmp(j_val, p).gt);

        if (i >= j) {
            *left = i;
            *right = j;
            return;
        }

        raw_pointer tmp = i_val;
        i_val = j_val;
        j_val = tmp;
        __cmodules_array_setval(a, i, i_val);
        __cmodules_array_setval(a, j, j_val);
    }
}
array __cmodules_array_quicksort(array a, size_t lo, size_t hi) {
    if (lo < hi) {
        raw_pointer p = __cmodules_array_pivot(a, lo, hi);
        size_t left;
        size_t right;
        __cmodules_array_partition(a, p, lo, hi, &left, &right);
        __cmodules_array_quicksort(a, lo, left-1);
        __cmodules_array_quicksort(a, right+1, hi);
    }
    return a;
}


list_node* __cmodules_list_mergesort_merge_by_type(list_node* nodes, size_t beg, size_t mid, size_t end) {
    list_node* result = calloc(sizeof(list_node), (end - beg));
    size_t l = beg;
    size_t r = mid;
    size_t cur = 0;

    while (l < mid && r < end) {
        int type_cmp = strcmp(nodes[l]->type_id, nodes[r]->type_id);
        if (type_cmp < 0) {
            result[cur] = nodes[l];
            l += 1;
        }
        else {
            result[cur] = nodes[r];
            r += 1;
        }
        cur += 1;
    }

    while (l < mid) {
        result[cur] = nodes[l];
        l += 1;
        cur += 1;
    }
    while (r < end) {
        result[cur] = nodes[r];
        r += 1;
        cur += 1;
    }

    for (size_t i = 0; i < cur; i++) {
        nodes[beg+i] = result[i];
    }

    free(result);
    return nodes;
}

list_node* __cmodules_list_mergesort_merge_by_value(list_node* nodes, size_t beg, size_t mid, size_t end) {
    list_node* result = calloc(sizeof(list_node), (end - beg));
    size_t l = beg;
    size_t r = mid;
    size_t cur = 0;

    while (l < mid && r < end) {
        int type_cmp = strcmp(nodes[l]->type_id, nodes[r]->type_id);
        if (type_cmp != 0) {
            result[cur] = nodes[l];
            l += 1;
        }
        else {
            cmp_result value_cmp = nodes[l]->type_cmp(nodes[l]->val, nodes[r]->val);
            if (value_cmp.le) {
                result[cur] = nodes[l];
                l += 1;
            }
            else {
                result[cur] = nodes[r];
                r += 1;
            }
        }
        cur += 1;
    }

    while (l < mid) {
        result[cur] = nodes[l];
        l += 1;
        cur += 1;
    }
    while (r < end) {
        result[cur] = nodes[r];
        r += 1;
        cur += 1;
    }

    for (size_t i = 0; i < cur; i++) {
        nodes[beg+i] = result[i];
    }

    free(result);
    return nodes;
}

list_node* __cmodules_list_mergesort_split(list_node* nodes, size_t beg, size_t end, bool sort_by_type) {
    if (end - beg <= 1)
        return nodes;

    size_t mid = (beg + end) / 2;

    __cmodules_list_mergesort_split(nodes, beg, mid, sort_by_type);
    __cmodules_list_mergesort_split(nodes, mid, end, sort_by_type);

    if (sort_by_type)
        return __cmodules_list_mergesort_merge_by_type(nodes, beg, mid, end);
    else
        return __cmodules_list_mergesort_merge_by_value(nodes, beg, mid, end);
}

list __cmodules_list_mergesort(list l) {
    if (l->len <= 1)
        return l;

    list_node* nodes = calloc(sizeof(list_node), (l->len));
    size_t i = 0;
    for (list_node node = l->head; node != 
# 278 "test/../src/types_sort.c" 3 4
                                          ((void *)0)
# 278 "test/../src/types_sort.c"
                                              ; node = node->next) {
        nodes[i] = node;
        i += 1;
    }

    nodes = __cmodules_list_mergesort_split(nodes, 0, l->len, ((_Bool) !0));
    nodes = __cmodules_list_mergesort_split(nodes, 0, l->len, ((_Bool) 0));

    for (i = 0; i < l->len - 1; i++) {
        nodes[i]->next = nodes[i+1];
    }
    nodes[i]->next = 
# 289 "test/../src/types_sort.c" 3 4
                    ((void *)0)
# 289 "test/../src/types_sort.c"
                        ;
    l->head = nodes[0];
    free(nodes);

    return l;
}


string __cmodules_string_sort(string s) {
    if (s->len <= 7)
        return __cmodules_string_insertion_sort(s);
    else
        return __cmodules_string_quicksort(s, 0, s->len-1);
}

array __cmodules_array_sort(array a) {
    if (a->len <= 7)
        return __cmodules_array_insertion_sort(a);
    else
        return __cmodules_array_quicksort(a, 0, a->len-1);
}

list __cmodules_list_sort(list l) {
    return __cmodules_list_mergesort(l);
}

set __cmodules_set_sort(set s) {
    return (set) __cmodules_list_mergesort((list) s);
}
# 20 "test/../src/types.c" 2
# 1 "test/../src/types_map.c" 1
string __cmodules_string_map(string s, uchar (*f)(uchar)) {
    for (size_t i = 0; i < s->len; i++) {
        s->val[i] = f(s->val[i]);
    }

    return s;
}

array __cmodules_array_map (array a, void* (*f)(void*)) {
    for (size_t i = 0; i < a->len; i++) {
        raw_pointer mapped = f(__cmodules_array_getval(a, i));
        __cmodules_array_setval(a, i, mapped);
    }

    return a;
}

list __cmodules_list_map(list l, void* (*f)(list_node)) {
    list_node node = l->head;

    while (node != 
# 21 "test/../src/types_map.c" 3 4
                  ((void *)0)
# 21 "test/../src/types_map.c"
                      ) {
        node->val = f(node);
        node = node->next;
    }

    return l;
}

dict __cmodules_dict_map(dict d, void* (*f)(dict_node)) {
    if (d->len == 0)
        return d;

    for (size_t i = 0; i < d->len; i++) {
        size_t hsh = d->hash_key(d->keys[i], d->bucket_size);
        dict_node node = d->vals[hsh];
        node->val = f(node);
        while (node->has_collision) {
            node = node->next_for_key;
            node->val = f(node);
        }
    }

    return d;
}

set __cmodules_set_map(set s, void* (*f)(list_node)) {
    list_node node = s->head;

    while (node != 
# 49 "test/../src/types_map.c" 3 4
                  ((void *)0)
# 49 "test/../src/types_map.c"
                      ) {
        node->val = f(node);
        node = node->next;
    }

    return s;
}
# 21 "test/../src/types.c" 2
# 1 "test/../src/types_filter.c" 1
string __cmodules_string_filter(string s, bool (*f)(uchar)) {
    size_t cur = 0;
    uchar* filtered_string = calloc(sizeof(uchar), (s->len));

    for (size_t i = 0; i < s->len; i++) {
        if (f(s->val[i])) {
            filtered_string[cur] = s->val[i];
            cur += 1;
        }
    }

    if (cur != s->len) {
        memset(s->val, 0, s->len * sizeof(uchar));
        for (size_t i = 0; i < cur; i++) {
            s->val[i] = filtered_string[i];
        }
        s->len = cur;
    }

    free(filtered_string);
    return s;
}

array __cmodules_array_filter (array a, bool (*f)(void*)) {
    size_t cur = 0;
    array filtered_array = __cmodules_array_new(a->type_id, a->type_size, 0, 0, 
# 26 "test/../src/types_filter.c" 3 4
                                                                                ((void *)0)
# 26 "test/../src/types_filter.c"
                                                                                    );

    for (size_t i = 0; i < a->len; i++) {
        raw_pointer cur_val = __cmodules_array_getval(a, i);
        if (f(cur_val)) {
            __cmodules_array_setval(filtered_array, cur, cur_val);
            filtered_array->len += 1;
            cur += 1;
        }
    }

    if (cur != a->len) {
        __cmodules_array_clear(a);
        a->val = filtered_array->val;
        a->len = filtered_array->len;
        a->mem = filtered_array->mem;
    }
    else {
        __cmodules_array_clear(filtered_array);
    }

    free(filtered_array);
    return a;
}

list __cmodules_list_filter(list l, bool (*f)(list_node)) {
    list_node node = l->head;
    list_node next_node;
    list_node prev_node;

    while (node != 
# 56 "test/../src/types_filter.c" 3 4
                  ((void *)0)
# 56 "test/../src/types_filter.c"
                      ) {
        if (node == l->head) {
            if (f(node)) {
                l->head = node->next;
                next_node = l->head;
                __cmodules_list_node_del(node);
                node = next_node;
                l->len -= 1;
            }
            else {
                prev_node = node;
                node = node->next;
            }
        }
        else {
            if (f(node)) {
                next_node = node->next;
                prev_node->next = next_node;
                __cmodules_list_node_del(node);
                node = next_node;
                l->len -= 1;
            }
            else {
                prev_node = node;
                node = node->next;
            }
        }
    }

    if (l->len == 0)
        l->head = 
# 86 "test/../src/types_filter.c" 3 4
                 ((void *)0)
# 86 "test/../src/types_filter.c"
                     ;

    return l;
}

dict __cmodules_dict_filter(dict d, bool (*f)(dict_node)) {
    if (d->len == 0)
        return d;

    for (size_t i = 0; i < d->len; i++) {
        size_t hsh = d->hash_key(d->keys[i], d->bucket_size);
        dict_node node = d->vals[hsh];
        if (f(node) == ((_Bool) 0)) {
            __cmodules_dict_rem(d, d->keys[i]);
        }
    }

    return d;
}

set __cmodules_set_filter(set l, bool (*f)(list_node)) {
    list_node node = l->head;
    list_node next_node;
    list_node prev_node;

    while (node != 
# 111 "test/../src/types_filter.c" 3 4
                  ((void *)0)
# 111 "test/../src/types_filter.c"
                      ) {
        if (node == l->head) {
            if (f(node)) {
                l->head = node->next;
                next_node = l->head;
                __cmodules_list_node_del(node);
                node = next_node;
                l->len -= 1;
            }
            else {
                prev_node = node;
                node = node->next;
            }
        }
        else {
            if (f(node)) {
                next_node = node->next;
                prev_node->next = next_node;
                __cmodules_list_node_del(node);
                node = next_node;
                l->len -= 1;
            }
            else {
                prev_node = node;
                node = node->next;
            }
        }
    }

    if (l->len == 0)
        l->head = 
# 141 "test/../src/types_filter.c" 3 4
                 ((void *)0)
# 141 "test/../src/types_filter.c"
                     ;

    return l;
}
# 22 "test/../src/types.c" 2
# 1 "test/../src/types_reduce.c" 1
uchar __cmodules_string_reduce(string s, uchar (*f)(uchar, uchar)) {
    if (s->len == 0)
        return 0;
    if (s->len == 1)
        return s->val[0];

    uchar result = s->val[s->len-1];
    for (size_t i = s->len-2; i != 0; i--) {
        result = f(result, s->val[i]);
    }

    return result;
}

void* __cmodules_array_reduce(array a, void* (*f)(void*, void*)) {
    if (a->len == 0)
        return 
# 17 "test/../src/types_reduce.c" 3 4
              ((void *)0)
# 17 "test/../src/types_reduce.c"
                  ;
    if (a->len == 1)
        return ((void**) a->val)[0];

    void** alias = (void**) a->val;
    void* result = alias[a->len-1];
    for (size_t i = a->len-2; i != 0; i--) {
        result = f(result, alias[i]);
    }

    return result;
}

void* __cmodules_list_reduce(list l, void* (*f)(void*, void*)) {
    if (l->len == 0)
        return 
# 32 "test/../src/types_reduce.c" 3 4
              ((void *)0)
# 32 "test/../src/types_reduce.c"
                  ;
    if (l->len == 1)
        return l->head->type_copy(l->head->val);

    list_node node = l->head;
    void* result = node->type_copy(node->val);
    node = node->next;

    while (node != 
# 40 "test/../src/types_reduce.c" 3 4
                  ((void *)0)
# 40 "test/../src/types_reduce.c"
                      ) {
        result = f(result, node->type_copy(node->val));
        node = node->next;
    }

    return result;
}

void* __cmodules_dict_reduce(dict d, void* (*f)(void*, void*)) {
    if (d->len == 0)
        return 
# 50 "test/../src/types_reduce.c" 3 4
              ((void *)0)
# 50 "test/../src/types_reduce.c"
                  ;
    if (d->len == 1)
        return d->vals[d->hash_key(d->keys[0], d->bucket_size)]->val;

    dict_node node = __cmodules_dict_get_node(d, d->keys[0]);
    void* result = node->val;
    for (size_t i = 1; i < d->len; i++) {
        node = __cmodules_dict_get_node(d, d->keys[i]);
        result = f(result, node->val);
    }

    return result;
}

void* __cmodules_set_reduce(set l, void* (*f)(void*, void*)) {
    if (l->len == 0)
        return 
# 66 "test/../src/types_reduce.c" 3 4
              ((void *)0)
# 66 "test/../src/types_reduce.c"
                  ;
    if (l->len == 1)
        return l->head->type_copy(l->head->val);

    list_node node = l->head;
    void* result = node->type_copy(node->val);
    node = node->next;

    while (node != 
# 74 "test/../src/types_reduce.c" 3 4
                  ((void *)0)
# 74 "test/../src/types_reduce.c"
                      ) {
        result = f(result, node->type_copy(node->val));
        node = node->next;
    }

    return result;
}
# 23 "test/../src/types.c" 2
# 1 "test/../src/types_getval.c" 1
uchar __cmodules_string_getval(string s, size_t pos) {
    if (pos > s->len-1)
        pos = s->len-1;

    return s->val[pos];
}

raw_pointer __cmodules_array_getval(array a, size_t pos) {
    if (pos > a->len-1)
        pos = a->len-1;

    switch (a->type_size) {
        case 1:
            return (raw_pointer) ((intptr_t) a->val[pos]);
        case 2:
            return (raw_pointer) ((intptr_t) ((int16_array) a)->val[pos]);
        case 4:
            return (raw_pointer) ((intptr_t) ((int32_array) a)->val[pos]);
        case 8:
            return (raw_pointer) ((intptr_t) ((int64_array) a)->val[pos]);
        default:
            return (raw_pointer) ((pointer_array) a)->val[pos];
    }
}

raw_pointer __cmodules_list_getval(list l, size_t pos) {
    if (l->len == 0)
        return 
# 28 "test/../src/types_getval.c" 3 4
              ((void *)0)
# 28 "test/../src/types_getval.c"
                  ;

    if (pos > l->len-1)
        pos = l->len-1;

    list_node node = l->head;
    for (size_t i = 0; i < pos; i++) {
        node = node->next;
    }

    return node->type_copy(node->val);
}

raw_pointer __cmodules_dict_getval(dict d, raw_pointer key) {
    if (!__cmodules_dict_has_key(d, key))
        return 
# 43 "test/../src/types_getval.c" 3 4
              ((void *)0)
# 43 "test/../src/types_getval.c"
                  ;

    return d->val_type_copy(__cmodules_dict_get_node(d, key)->val);
}

raw_pointer __cmodules_set_getval(set s, size_t pos) {
    if (s->len == 0)
        return 
# 50 "test/../src/types_getval.c" 3 4
              ((void *)0)
# 50 "test/../src/types_getval.c"
                  ;

    if (pos > s->len-1)
        pos = s->len-1;

    list_node node = s->head;
    for (size_t i = 0; i < pos; i++) {
        node = node->next;
    }

    return node->type_copy(node->val);
}
# 24 "test/../src/types.c" 2
# 1 "test/../src/types_setval.c" 1
void __cmodules_string_setval(string s, size_t pos, raw_pointer val) {
    if (pos > s->len-1)
        pos = s->len-1;

    s->val[pos] = (uchar) ((intptr_t) val);
}

void __cmodules_array_setval(array a, size_t pos, raw_pointer val) {
    if (pos > a->len-1)
        pos = a->len-1;

    switch (a->type_size) {
        case 1:
            a->val[pos] = (byte) ((intptr_t) a->type_copy(val));
            break;

        case 2:
            ((int16_array) a)->val[pos] = (s16) ((intptr_t) a->type_copy(val));
            break;

        case 4:
            if (sizeof(raw_pointer) == 4) {
                a->type_del((raw_pointer) ((intptr_t) ((int32_array) a)->val[pos]));
            }
            ((int32_array) a)->val[pos] = (s32) ((intptr_t) a->type_copy(val));
            break;

        case 8:
            if (sizeof(raw_pointer) == 8) {
                a->type_del((raw_pointer) ((intptr_t) ((int64_array) a)->val[pos]));
            }
            ((int64_array) a)->val[pos] = (s64) ((intptr_t) a->type_copy(val));
            break;

        default:
            ((pointer_array) a)->val[pos] = a->type_copy(val);
            break;
    }
}

void __cmodules_list_setval(list l, size_t pos, raw_pointer val) {
    if (l->len == 0)
        return;

    if (pos > l->len-1)
        pos = l->len-1;

    list_node node = l->head;
    for (size_t i = 0; i < pos; i++) {
        node = node->next;
    }

    raw_pointer val_copy = node->type_copy(val);
    node->val = val_copy;
}

void __cmodules_dict_setval(dict d, raw_pointer key, raw_pointer val) {
    if (!__cmodules_dict_has_key(d, key))
        return;

    raw_pointer val_copy = d->val_type_copy(val);
    dict_node node = __cmodules_dict_get_node(d, key);
    node->val = val_copy;
}

void __cmodules_set_setval(set s, size_t pos, raw_pointer val) {
    if (s->len == 0)
        return;

    if (pos > s->len-1)
        pos = s->len-1;

    list_node node = s->head;
    for (size_t i = 0; i < pos; i++) {
        node = node->next;
    }
    raw_pointer val_copy = node->type_copy(val);
    node->val = val_copy;
}
# 25 "test/../src/types.c" 2

s32 __cmodules_s32_mcd(s32 x, s32 y) {
    s32 t;
    while (y != 0) {
        t = y;
        y = x % y;
        x = t;
    }
    return x;
}

s64 __cmodules_s64_mcd(s64 x, s64 y) {
    s64 t;
    while (y != 0) {
        t = y;
        y = x % y;
        x = t;
    }
    return x;
}

u32 __cmodules_u32_mcd(u32 x, u32 y) {
    u32 t;
    while (y != 0) {
        t = y;
        y = x % y;
        x = t;
    }
    return x;
}

u64 __cmodules_u64_mcd(u64 x, u64 y) {
    u64 t;
    while (y != 0) {
        t = y;
        y = x % y;
        x = t;
    }
    return x;
}

void* __cmodules_stack_pop(stack s) {
    if (s->len == 0)
        return 
# 68 "test/../src/types.c" 3 4
              ((void *)0)
# 68 "test/../src/types.c"
                  ;

    list_node node = s->head;
    raw_pointer result = node->val;

    s->head = node->next;
    s->len -= 1;
    free(node);

    return result;
}

void* __cmodules_fifo_pop(fifo q) {
    if (q->len == 0)
        return 
# 82 "test/../src/types.c" 3 4
              ((void *)0)
# 82 "test/../src/types.c"
                  ;

    fifo_node node = q->tail;
    void* result = node->type_copy(node->val);
    if (q->len == 1) {
        q->head = 
# 87 "test/../src/types.c" 3 4
                 ((void *)0)
# 87 "test/../src/types.c"
                     ;
        q->tail = 
# 88 "test/../src/types.c" 3 4
                 ((void *)0)
# 88 "test/../src/types.c"
                     ;
    }
    else {
        node->prev->next = 
# 91 "test/../src/types.c" 3 4
                          ((void *)0)
# 91 "test/../src/types.c"
                              ;
    }
    q->len -= 1;
    free(node);

    return result;
}

list_node __cmodules_stack_pop_node(stack s) {
    if (s->len == 0)
        return 
# 101 "test/../src/types.c" 3 4
              ((void *)0)
# 101 "test/../src/types.c"
                  ;

    list_node node = s->head;

    s->head = node->next;
    s->len -= 1;

    return node;
}

fifo_node __cmodules_fifo_pop_node(fifo q) {
    if (q->len == 0)
        return 
# 113 "test/../src/types.c" 3 4
              ((void *)0)
# 113 "test/../src/types.c"
                  ;

    fifo_node node = q->tail;
    if (q->len == 1) {
        q->head = 
# 117 "test/../src/types.c" 3 4
                 ((void *)0)
# 117 "test/../src/types.c"
                     ;
        q->tail = 
# 118 "test/../src/types.c" 3 4
                 ((void *)0)
# 118 "test/../src/types.c"
                     ;
    }
    else {
        node->prev->next = 
# 121 "test/../src/types.c" 3 4
                          ((void *)0)
# 121 "test/../src/types.c"
                              ;
    }
    q->len -= 1;

    return node;
}

dict_node __cmodules_dict_get_node(dict d, void* key) {
    size_t hsh = d->hash_key(key, d->bucket_size);

    dict_node node = d->vals[hsh];
    while (node->has_collision) {
        if (d->key_type_cmp(key, node->key).eq) {
            break;
        }
        node = node->next_for_key;
    }

    return node;
}

bool __cmodules_dict_has_key(dict d, void* key) {
    for (size_t i = 0; i < d->len; i++) {
        if (d->key_type_cmp(d->keys[i], key).eq) {
            return ((_Bool) !0);
        }
    }

    return ((_Bool) 0);
}

bool __cmodules_set_has_node(set s, list_node n) {
    list_node node = s->head;

    while (node != 
# 155 "test/../src/types.c" 3 4
                  ((void *)0)
# 155 "test/../src/types.c"
                      ) {
        if (strcmp(node->type_id, n->type_id)) {
            if (node->type_cmp(node->val, n->val).eq)
                return ((_Bool) !0);
        }
        node = node->next;
    }

    return ((_Bool) 0);
}
# 561 "test/../types.h" 2
# 2 "test/test.c" 2
# 1 "test/../fract_type.h" 1



# 1 "test/../types.h" 1
# 5 "test/../fract_type.h" 2

typedef struct {
    s32 num;
    s32 den;
} fract32;

typedef struct {
    s64 num;
    s64 den;
} fract64;
# 26 "test/../fract_type.h"
fract32 __cmodules_fract32_add(fract32, fract32);
fract64 __cmodules_fract64_add(fract64, fract64);







fract32 __cmodules_fract32_inv(fract32);
fract64 __cmodules_fract64_inv(fract64);







fract32 __cmodules_fract32_mul(fract32, fract32);
fract64 __cmodules_fract64_mul(fract64, fract64);





# 1 "test/../src/fract_type.c" 1

fract32 __cmodules_fract32_add(fract32 x, fract32 y) {
    s32 num = x.num * y.den + y.num * x.den;
    s32 den = x.den * y.den;
    s32 div = _Generic( (num), s32: __cmodules_s32_mcd, s64: __cmodules_s64_mcd, u32: __cmodules_u32_mcd, u64: __cmodules_u64_mcd )(num,den);

    return (fract32) {num/div, den/div};
}

fract64 __cmodules_fract64_add(fract64 x, fract64 y) {
    s64 num = x.num * y.den + y.num * x.den;
    s64 den = x.den * y.den;
    s64 div = _Generic( (num), s32: __cmodules_s32_mcd, s64: __cmodules_s64_mcd, u32: __cmodules_u32_mcd, u64: __cmodules_u64_mcd )(num,den);

    return (fract64) {num/div, den/div};
}


fract32 __cmodules_fract32_inv(fract32 x) {
    return (fract32) {x.den, x.num};
}

fract64 __cmodules_fract64_inv(fract64 x) {
    return (fract64) {x.den, x.num};
}


fract32 __cmodules_fract32_mul(fract32 x, fract32 y) {
    s32 num = x.num * y.num;
    s32 den = x.den * y.den;
    s32 div = _Generic( (num), s32: __cmodules_s32_mcd, s64: __cmodules_s64_mcd, u32: __cmodules_u32_mcd, u64: __cmodules_u64_mcd )(num,den);

    return (fract32) {num/div, den/div};
}

fract64 __cmodules_fract64_mul(fract64 x, fract64 y) {
    s64 num = x.num * y.num;
    s64 den = x.den * y.den;
    s64 div = _Generic( (num), s32: __cmodules_s32_mcd, s64: __cmodules_s64_mcd, u32: __cmodules_u32_mcd, u64: __cmodules_u64_mcd )(num,den);

    return (fract64) {num/div, den/div};
}
# 52 "test/../fract_type.h" 2
# 3 "test/test.c" 2
# 1 "test/../bigint.h" 1




# 1 "test/../parse_expr.h" 1





typedef enum {
    INTEGER_CONSTANT,
    REAL_CONSTANT,
    VARIABLE,
    PLUS,
    MINUS,
    TIMES,
    DIVIDE,
    POWER,
    AND,
    OR,
    NOT,
    XOR,
    LPAREN,
    RPAREN,
    OTHER
} expr_elem_type;

typedef struct {
    raw_string literal;
    size_t priority;
    expr_elem_type type;
} expr_elem_struct;
typedef expr_elem_struct* expr_elem;

typedef struct {
    expr_elem* elems;
    size_t len;
} expr_t_struct;
typedef expr_t_struct* expr_t;

expr_t parse_expr(const raw_string);
expr_t validate_expr(expr_t);
expr_t to_postfix_notation(expr_t);

# 1 "test/../src/parse_expr.c" 1
expr_t parse_expr(const raw_string expr) {
    bool is_sep_or_op(char c) {
        switch (c) {
            case '+':
            case '-':
            case '*':
            case '/':
            case '&':
            case '^':
            case '|':
            case '!':
            case '~':
            case '(':
            case ')':
            case ' ':
                return ((_Bool) !0);

            default:
                return ((_Bool) 0);
        }
    }
    void get_token(raw_string token, const raw_string expr, size_t* i) {
        while (expr[*i] == ' ')
            *i += 1;

        size_t cur = 0;
        switch (expr[*i]) {
            case '+':
            case '-':
            case '/':
            case '&':
            case '|':
            case '!':
            case '~':
            case '^':
            case '(':
            case ')':
                token[cur] = expr[*i];
                cur += 1;
                *i += 1;
                break;

            case '*':
                if (expr[*i + 1] == '*') {
                    token[cur] = expr[*i];
                    token[cur +1] = expr[*i + 1];
                    cur += 2;
                    *i += 2;
                }
                else {
                    token[cur] = expr[*i];
                    cur += 1;
                    *i += 1;
                }
                break;

            default:
                while (!is_sep_or_op(expr[*i])) {
                    token[cur] = expr[*i];
                    cur += 1;
                    *i += 1;
                }
                break;
        }
        token[cur] = 0;
    }

    expr_elem_type parse_token_type(const raw_string token) {
        bool only_numbers = ((_Bool) !0);
        size_t num_of_dots = 0;
        size_t token_len = strlen(token);

        switch (token[0]) {
            case '+':
                if (token_len > 1)
                    return OTHER;
                else
                    return PLUS;

            case '-':
                if (token_len > 1)
                    return OTHER;
                else
                    return MINUS;

            case '*':
                if (token_len > 2)
                    return OTHER;
                else if (token_len == 2 && token[1] == '*')
                    return POWER;
                else
                    return TIMES;

            case '/':
                if (token_len > 1)
                    return OTHER;
                else
                    return DIVIDE;

            case '&':
                if (token_len > 1)
                    return OTHER;
                else
                    return AND;

            case '|':
                if (token_len > 1)
                    return OTHER;
                else
                    return OR;

            case '!':
            case '~':
                if (token_len > 1)
                    return OTHER;
                else
                    return NOT;

            case '^':
                if (token_len > 1)
                    return OTHER;
                else
                    return XOR;

            case '(':
                if (token_len > 1)
                    return OTHER;
                else
                    return LPAREN;

            case ')':
                if (token_len > 1)
                    return OTHER;
                else
                    return RPAREN;

            default:
                break;
        }

        for (size_t i = 0; i < token_len; i++) {
            if (only_numbers && i == 1) {

            }
            if (token[i] == '.')
                num_of_dots += 1;
            else if (token[i] < '0' || token[i] > '9') {
                if (only_numbers && i == 1) {
                    switch(token[i]) {
                    case 'b':
                    case 'o':
                    case 'd':
                    case 'x':
                        continue;
                    default:
                        ;
                    }
                }
                only_numbers = ((_Bool) 0);
            }
        }

        if (only_numbers) {
            if (num_of_dots == 0)
                return INTEGER_CONSTANT;
            else if (num_of_dots == 1)
                return REAL_CONSTANT;
            else
                return OTHER;
        }
        else {
            if (token[0] >= '0' && token[0] <= '9')
                return OTHER;
            else
                return VARIABLE;
        }
    }

    void assign_priority(expr_t expr) {
        for (size_t i = 0; i < expr->len; i++) {
            switch (expr->elems[i]->type) {
                case VARIABLE:
                case INTEGER_CONSTANT:
                case REAL_CONSTANT:
                case PLUS:
                case OTHER:
                    expr->elems[i]->priority = 0;
                    break;

                case MINUS:
                    if (i == 0)
                        expr->elems[i]->priority = 3;
                    else if ((expr->elems[i-1]->type == TIMES ||
                           expr->elems[i-1]->type == DIVIDE ||
                           expr->elems[i-1]->type == POWER) &&
                          (expr->elems[i-1]->type == VARIABLE ||
                           expr->elems[i-1]->type == INTEGER_CONSTANT ||
                           expr->elems[i-1]->type == REAL_CONSTANT ||
                           expr->elems[i-1]->type == LPAREN ||
                           expr->elems[i-1]->type == OTHER))
                        expr->elems[i]->priority = 3;
                    else
                        expr->elems[i]->priority = 0;
                    break;

                case TIMES:
                case DIVIDE:
                    expr->elems[i]->priority = 1;
                    break;

                case POWER:
                case AND:
                case OR:
                case NOT:
                case XOR:
                    expr->elems[i]->priority = 2;
                    break;

                case LPAREN:
                    expr->elems[i]->priority = 4;
                    break;

                case RPAREN:
                    expr->elems[i]->priority = 5;
                    break;
            }
        }
    }

    raw_string copy_token(const raw_string token) {
        size_t token_len = strlen(token);
        raw_string literal = calloc(sizeof(char), ((token_len)+1));
        strcpy(literal, token);
        return literal;
    }

    size_t expr_len = strlen(expr);

    expr_t result = malloc(sizeof(expr_t_struct));
    if (expr_len == 0) {
        result->elems = 
# 241 "test/../src/parse_expr.c" 3 4
                       ((void *)0)
# 241 "test/../src/parse_expr.c"
                           ;
        result->len = 0;
        return result;
    }

    size_t elem_num = 0;
    for (size_t i = 0; i < expr_len; i++) {
        if (is_sep_or_op(expr[i]) && expr[i] != ' ' && !(expr[i] == '*' && expr[i+1] == '*'))
                elem_num += 2;
    }
    if (elem_num == 0)
        elem_num = 1;
    expr_elem* elems = calloc(sizeof(expr_elem), (elem_num));

    raw_pointer cur_token = calloc(sizeof(char), ((expr_len)+1));
    size_t cur_elem = 0;
    for (size_t i = 0; i < expr_len;) {
        get_token(cur_token, expr, &i);
        elems[cur_elem] = malloc(sizeof(expr_elem_struct));
        elems[cur_elem]->type = parse_token_type(cur_token);
        elems[cur_elem]->literal = copy_token(cur_token);
        cur_elem += 1;
    }

    result->elems = elems;
    result->len = cur_elem;
    assign_priority(result);
    return result;
}




# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 1 3
# 11 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_print_push.h" 1 3
# 12 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 2 3

#pragma pack(push,_CRT_PACKING)
# 84 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  
# 84 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
 __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 103 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  __extension__ typedef long long fpos_t;
# 139 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 377 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__((__format__ (ms_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) fprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
  __attribute__((__format__ (ms_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) printf(const char * __restrict__ _Format,...);
  __attribute__((__format__ (ms_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) sprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,...) ;

  __attribute__((__format__ (ms_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) vfprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,va_list _ArgList);
  __attribute__((__format__ (ms_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) vprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__((__format__ (ms_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) vsprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,va_list _Args) ;

  __attribute__((__format__ (ms_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...) ;
  __attribute__((__format__ (ms_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) scanf(const char * __restrict__ _Format,...) ;
  __attribute__((__format__ (ms_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...) ;





  __attribute__((__format__ (ms_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_vscanf(const char * __restrict__ Format, va_list argp);
  __attribute__((__format__ (ms_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
  __attribute__((__format__ (ms_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__((__format__ (ms_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
  {
    return __ms_vfscanf (__stream, __format, __local_argv);
  }

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__((__format__ (ms_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int vsscanf (const char * __restrict__ __source, const char * __restrict__ __format, __builtin_va_list __local_argv)
  {
    return __ms_vsscanf( __source, __format, __local_argv );
  }
  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__((__format__ (ms_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int vscanf(const char *__format, __builtin_va_list __local_argv)
  {
    return __ms_vscanf (__format, __local_argv);
  }




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);



  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);
# 484 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  long __attribute__((__cdecl__)) ftell(FILE *_File);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
# 496 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  __extension__ int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __extension__ long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);




  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);


  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);

  __attribute__((__format__ (ms_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__((__format__ (ms_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;




       
       


  __attribute__((__format__ (ms_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __ms_vsnprintf(char * __restrict__ d,size_t n,const char * __restrict__ format,va_list arg)
    ;

  static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
  __attribute__((__format__ (ms_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int vsnprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, va_list __local_argv)
  {
    return __ms_vsnprintf (__stream, __n, __format, __local_argv);
  }

  __attribute__((__format__ (ms_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __ms_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);


static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
__attribute__((__format__ (ms_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
int snprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __ms_vsnprintf (__stream, __n, __format, __local_argv);
  __builtin_va_end( __local_argv );
  return __retval;
}


       
       


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);
# 900 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ungetc_nolock(int _Ch,FILE *_File);





  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
# 995 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);






#pragma pack(pop)

# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 1 3
# 9 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 2 3
# 28 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) clearerr_s(FILE *_File);
  int __attribute__((__cdecl__)) fprintf_s(FILE *_File,const char *_Format,...);
  size_t __attribute__((__cdecl__)) fread_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  int __attribute__((__cdecl__)) printf_s(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_s_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) sscanf_s(const char *_Src,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s(const char *_Src,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  int __attribute__((__cdecl__)) vfprintf_s(FILE *_File,const char *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf_s(const char *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);
 

  __attribute__((dllimport)) int __attribute__((__cdecl__)) vsprintf_s(char *_DstBuf,size_t _Size,const char *_Format,va_list _ArgList);
 

  __attribute__((dllimport)) int __attribute__((__cdecl__)) sprintf_s(char *_DstBuf,size_t _DstSize,const char *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,...);
 

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p(FILE *_File,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p(FILE *_File,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p(const char *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_l(char *_DstBuf,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_l(char *_DstBuf,const char *_Format,_locale_t,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_s_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) fopen_s(FILE **_File,const char *_Filename,const char *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) freopen_s(FILE** _File, const char *_Filename, const char *_Mode, FILE *_Stream);

  __attribute__ ((__dllimport__)) char* __attribute__((__cdecl__)) gets_s(char*,rsize_t);
 

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) tmpnam_s(char*,rsize_t);
 
# 187 "C:/Strawberry/c/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _fread_nolock_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
# 1008 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 2 3

# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/_mingw_print_pop.h" 1 3
# 1010 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdio.h" 2 3
# 275 "test/../src/parse_expr.c" 2

# 275 "test/../src/parse_expr.c"
expr_t to_postfix_notation(expr_t expr) {
    stack ops = __cmodules_stack_new();
    fifo out = __cmodules_fifo_new();

    for (size_t i = 0; i < expr->len; i++) {
        expr_elem cur_elem;
        printf("%s\n", expr->elems[i]->literal);
        switch (expr->elems[i]->type) {
            case VARIABLE:
            case INTEGER_CONSTANT:
            case REAL_CONSTANT:
            case OTHER:
                _Generic( (out), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(out, "expr_elem", sizeof(expr_elem), (raw_pointer) (((intptr_t*)((expr_elem[]){expr->elems[i]}))[0] & ((intptr_t) __cmodules_lsbs(8*sizeof(expr_elem)))));
                break;

            case PLUS:
            case MINUS:
            case TIMES:
            case DIVIDE:
            case POWER:
            case AND:
            case OR:
            case NOT:
            case XOR:
            case LPAREN:
                cur_elem = (expr_elem) _Generic( (ops), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop );
                while (cur_elem != 
# 301 "test/../src/parse_expr.c" 3 4
                                  ((void *)0) 
# 301 "test/../src/parse_expr.c"
                                       && cur_elem->priority <= expr->elems[i]->priority) {
                    _Generic( (out), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(out, "expr_elem", sizeof(expr_elem), (raw_pointer) (((intptr_t*)((expr_elem[]){cur_elem}))[0] & ((intptr_t) __cmodules_lsbs(8*sizeof(expr_elem)))));
                    cur_elem = (expr_elem) _Generic( (ops), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop );
                }
                _Generic( (ops), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(ops, "expr_elem", sizeof(expr_elem), (raw_pointer) (((intptr_t*)((expr_elem[]){expr->elems[i]}))[0] & ((intptr_t) __cmodules_lsbs(8*sizeof(expr_elem)))));
                break;

            case RPAREN:
                cur_elem = (expr_elem) _Generic( (ops), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop );
                while (cur_elem->type != LPAREN) {
                    printf("%s\n", cur_elem->literal);
                    _Generic( (out), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(out, "expr_elem", sizeof(expr_elem), (raw_pointer) (((intptr_t*)((expr_elem[]){cur_elem}))[0] & ((intptr_t) __cmodules_lsbs(8*sizeof(expr_elem)))));
                    cur_elem = (expr_elem) _Generic( (ops), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop );
                }
                break;
        }
    }

    while (!(ops->len == 0)) {
        _Generic( (out), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(out, "expr_elem", sizeof(expr_elem), (raw_pointer) (((intptr_t*)((expr_elem[]){((expr_elem) _Generic( (ops), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop ))}))[0] & ((intptr_t) __cmodules_lsbs(8*sizeof(expr_elem)))));
    }

    size_t cur = 0;
    while (!(out->len == 0)) {
        expr->elems[cur] = (expr_elem) _Generic( (out), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop );
    }

    _Generic( (ops), string: __cmodules_string_del, array: __cmodules_array_del, list: __cmodules_list_del, fifo: __cmodules_fifo_del, stack: __cmodules_stack_del, dict: __cmodules_dict_del, set: __cmodules_set_del, list_node: __cmodules_list_node_del, fifo_node: __cmodules_fifo_node_del )(ops);
    _Generic( (out), string: __cmodules_string_del, array: __cmodules_array_del, list: __cmodules_list_del, fifo: __cmodules_fifo_del, stack: __cmodules_stack_del, dict: __cmodules_dict_del, set: __cmodules_set_del, list_node: __cmodules_list_node_del, fifo_node: __cmodules_fifo_node_del )(out);
    return expr;
}
# 42 "test/../parse_expr.h" 2
# 6 "test/../bigint.h" 2


typedef struct {
    s64* block;
    s64* last;
    size_t size;
} bigint;


bigint __cmodules_bigint_new(size_t, size_t, ...);

typedef struct {
    expr_elem* elems;
    bigint (*solve)(size_t, ...);
} bigint_expr;

# 1 "test/../src/bigint.c" 1
# 1 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdarg.h" 1 3 4
# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/stdarg.h" 1 3 4
# 2 "C:/Strawberry/c/lib/gcc/x86_64-w64-mingw32/7.1.0/include/stdarg.h" 2 3 4
# 2 "test/../src/bigint.c" 2
bigint __cmodules_bigint_new(size_t size, size_t argnum, ...) {
    bigint result;

    result.size = size;
    result.block = calloc(sizeof(s64), (size));
    result.last = result.block + size - 1;

    if (argnum > 0) {
        va_list args;
        
# 11 "test/../src/bigint.c" 3 4
       __builtin_va_start(
# 11 "test/../src/bigint.c"
       args
# 11 "test/../src/bigint.c" 3 4
       ,
# 11 "test/../src/bigint.c"
       argnum
# 11 "test/../src/bigint.c" 3 4
       )
# 11 "test/../src/bigint.c"
                             ;
        s64 init = 
# 12 "test/../src/bigint.c" 3 4
                  __builtin_va_arg(
# 12 "test/../src/bigint.c"
                  args
# 12 "test/../src/bigint.c" 3 4
                  ,
# 12 "test/../src/bigint.c"
                  int
# 12 "test/../src/bigint.c" 3 4
                  )
# 12 "test/../src/bigint.c"
                                   ;
        result.block[0] = init;
        
# 14 "test/../src/bigint.c" 3 4
       __builtin_va_end(
# 14 "test/../src/bigint.c"
       args
# 14 "test/../src/bigint.c" 3 4
       )
# 14 "test/../src/bigint.c"
                   ;

        if (init < 0) {
            for (size_t i = 1; i < size; i++) {
                result.block[i] = -1;
            }
        }
    }

    return result;
}
# 23 "test/../bigint.h" 2
# 4 "test/test.c" 2
# 1 "test/../parse_expr.h" 1
# 5 "test/test.c" 2

# 1 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 1 3
# 10 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
       
# 11 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3





# 15 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
struct _exception;

#pragma pack(push,_CRT_PACKING)
# 119 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;

  typedef union __mingw_fp_types_t
  {
    long double *ld;
    double *d;
    float *f;
    __mingw_ldbl_type_t *ldt;
    __mingw_dbl_type_t *dt;
    __mingw_flt_type_t *ft;
  } __mingw_fp_types_t;




  extern double * __imp__HUGE;
# 168 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 243 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
# 270 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  struct _complex {
    double x;
    double y;
  };


  double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 297 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 327 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 372 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
typedef float float_t;
typedef double double_t;
# 407 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 520 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 607 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 664 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 863 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1030 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1087 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1098 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1181 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1581 "C:/Strawberry/c/x86_64-w64-mingw32/include/math.h" 3
#pragma pack(pop)
# 7 "test/test.c" 2


# 8 "test/test.c"
int main () {





    stack stk = __cmodules_stack_new();
    for (long i = 0; i <= 10; i += 1) {
        _Generic( (stk), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(stk, "s32", sizeof(s32), (raw_pointer) (((intptr_t*)((s32[]){i}))[0] & ((intptr_t) __cmodules_lsbs(8*sizeof(s32)))));
    }
    while (!(stk->len == 0)) {
        printf("%d\n", (s32) _Generic( (stk), stack: __cmodules_stack_pop, fifo: __cmodules_fifo_pop ));
    }

    dict d = __cmodules_dict_new("raw_string", sizeof(raw_string), "s32", sizeof(s32));

    raw_string key = calloc(sizeof(char), ((1)+1));
    key[0] = 'A' - 1;
    for (size_t i = 0; i < 26; i++) {
        char cur = key[0] + 1;
        key[0] = cur;
        _Generic( (d), string: __cmodules_string_add, array: __cmodules_array_add, list: __cmodules_list_add, fifo: __cmodules_fifo_add, stack: __cmodules_stack_add, dict: __cmodules_dict_add, set: __cmodules_set_add )(d, (raw_pointer) (raw_string) key, (((raw_pointer*) ((typeof(i*i*i)[]){i*i*i}))[0]));
    }
    free(key);
    _Generic( (d), string: __cmodules_string_setval, array: __cmodules_array_setval, list: __cmodules_list_setval, dict: __cmodules_dict_setval, set: __cmodules_set_setval )(d, "A", ((raw_pointer*) ((typeof(75)[]){75}))[0]);

    for (raw_pointer* k = d->keys; k != d->keys + d->len; k += 1) {
        printf("d['%s'] = %d\n", (raw_string) *k, (s32) _Generic( (d), string: __cmodules_string_getval, array: __cmodules_array_getval, list: __cmodules_list_getval, dict: __cmodules_dict_getval, set: __cmodules_set_getval )(d, *k));
    }

    _Generic( (d), string: __cmodules_string_del, array: __cmodules_array_del, list: __cmodules_list_del, fifo: __cmodules_fifo_del, stack: __cmodules_stack_del, dict: __cmodules_dict_del, set: __cmodules_set_del, list_node: __cmodules_list_node_del, fifo_node: __cmodules_fifo_node_del )(d);
    return 0;
}
